Actions are essentially element-level lifecycle functions. They're useful for things like:

interfacing with third-party libraries
lazy-loaded images
tooltips
adding custom event handlers

    import { pannable } from './pannable.js';

    <div class="box"
        use:pannable
        on:panstart={handlePanStart}
        on:panmove={handlePanMove}
        on:panend={handlePanEnd}
    ></div>

In the pannable.js file. Like transition functions, an action function receives a 
node and some optional parameters, and returns an action object. That object can 
have a destroy function, which is called when the element is unmounted.

We want to fire panstart event when the user mouses down on the element, panmove events 
(with dx and dy properties showing how far the mouse moved) when they drag it, and 
panend events when they mouse up. One possible implementation looks like this:

    export function pannable(node) {
        let x;
        let y;

        function handleMousedown(event) {
            x = event.clientX;
            y = event.clientY;

            node.dispatchEvent(new CustomEvent('panstart', {
                detail: { x, y }
            }));

            window.addEventListener('mousemove', handleMousemove);
            window.addEventListener('mouseup', handleMouseup);
        }

        function handleMousemove(event) {
            const dx = event.clientX - x;
            const dy = event.clientY - y;
            x = event.clientX;
            y = event.clientY;

            node.dispatchEvent(new CustomEvent('panmove', {
                detail: { x, y, dx, dy }
            }));
        }

        function handleMouseup(event) {
            x = event.clientX;
            y = event.clientY;

            node.dispatchEvent(new CustomEvent('panend', {
                detail: { x, y }
            }));

            window.removeEventListener('mousemove', handleMousemove);
            window.removeEventListener('mouseup', handleMouseup);
        }

        node.addEventListener('mousedown', handleMousedown);

        return {
            destroy() {
                node.removeEventListener('mousedown', handleMousedown);
            }
        };
    }

///////////////////////////////////////////////////
Adding parameters to actions

Like transitions and animations, an action can take an argument, which the action 
function will be called with alongside the element it belongs to.
    <div class="box"
        use:pannable={200}
    ></div>

    ....

    and receive the parameter in action like:
        export function pannable(node, duration) {
            ....
        }

To change parameters, we can add an update method in pannable.js. 
This will be called whenever the argument changes:
    return {
        update(newDuration) {
            duration = newDuration;
        },
        // ...
    };

If you need to pass multiple arguments to an action, combine them into a single object, 
as in use:pannable={{duration: 200, spiciness: 100}}

and receive it like:
    export function pannable(node, duration) {
        //duration will be {duration: 200, spiciness: 100}
    }