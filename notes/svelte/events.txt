In Svelte you can define a listener for a DOM event directly in the template, using the on:
<event> syntax.
    <button on:click={(e) => {alert('clicked', e)}}>Click me</button>
    or
    <script>
        const doSomething = (e) => {
            alert('clicked', e)
        }
    </script>
    <button on:click={doSomething}>Click me</button>

//////////////////////////////////////////
Svelte passes the event handler as the argument of the function, which is handy if you need to
stop propagation or to reference something in the Event object
//////////////////////////////////////////
Modifiers:
    Svelte provides us modifiers, a way to apply it directly without manually
    doing it. like stopPropagation and preventDefault.
    You apply a modifier like this: 
        <button on:click|stopPropagation|preventDefault={doSomething}>Click me</button>

There are other modifiers, which are more niche. capture enables capturing events instead of
bubbling, once only fires the event once, self only fires the event if the target of the event is
this object (removing it from the bubbling/capturing hierarchy).

    preventDefault — calls event.preventDefault() before running the handler. 
    stopPropagation — calls event.stopPropagation(), preventing the event reaching the 
                      next element
    passive — improves scrolling performance on touch/wheel events 
              (Svelte will add it automatically where it's safe to do so)
    capture — fires the handler during the capture phase instead of the bubbling phase
    once — remove the handler after the first time it runs
    self — only trigger handler if event.target is the element itself

////////////////////////////////////////////////
Custom events:
    What's interesting is that we can create custom events in components, and use the same
    syntax of built-in DOM events.
    To do so, we must import the createEventDispatcher function from the svelte package and
    call it to get an event dispatcher
    Once we do so, we can call the dispatch() function, passing a string that identifies the event
    (which we'll use for the on: syntax in other components that use this), the second argument to
    dispatch is the value we want to pass through that event:

        <script>
            import { createEventDispatcher } from 'svelte';

            const dispatch = createEventDispatcher();
            dispatch('eventName', value);
        </script>

        and use it like:
            <ComponentName on:eventName={event => {console.log(event)}} />
                //event contains the data, we passed using dispatch function.

    we can pass anything using dispatch i.e. string, number, object, array...

    createEventDispatcher must be called when the component is first instantiated — 
    you can't do it later inside e.g. a setTimeout callback. This links dispatch to the 
    component instance.

    This can be used to send data from child component to parent

////////////////////////////////////////////////////////////////////
forwarding component events:
    Unlike DOM events, component events don't bubble. If you want to listen to an 
    event on some deeply nested component, the intermediate components must forward the event.

    One way we could solve the problem is adding createEventDispatcher to intermediate
    components, listening for the event, and creating a handler to forward it

    Svelte gives us an equivalent shorthand — an on:event_name event directive without 
    a value means 'forward all event_name events'.
        <Intermediate on:message />

    This shorthand works on DOM events also:
        Parent:
            <Child on:click={eventHandler} />
        Child:
            <button on:click />
////////////////////////////////////////////////////////////////
In some frameworks you may see recommendations to avoid inline event handlers for 
performance reasons, particularly inside loops. That advice doesn't apply to 
Svelte — the compiler will always do the right thing, whichever form you choose.