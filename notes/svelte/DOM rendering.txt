We can use js inside html template using {}
    <p>hello {name}</p> will insert the value of js variable 'name'
we can also use js function like Date etc:
    <p>hello {name.toUpperCase()}</p>
We can also use dynamic values on attributes of html elements:
    <img src={src} />
    <img alt="{name} is dancing" />
    if name of attribute and variable are same, we can use shorthand:
        <img {src} />
///////////////////////////////////////////////////////////
If condition:
    <script>
        let isRed = true
    </script>

    {#if isRed}
        <p>Red</p>
    {:else if isGreen}
        <p>Green</p>
    {:else}
        {#if isDog}             //nesting
            <p>It is a dog</p>
        {/if}
        <p>Not red</p>
    {/if}

/////////////////////////////////////////////////////////////
loop:
    <script>
        let goodDogs = ['Roger', 'Syd']
    </script>
    
    {#each goodDogs as goodDog, index}
        <li>{index}: {goodDog}</li>
    {/each}

    When dynamically editing the lists removing and adding elements, you should always pass an
    identifier in lists, to prevent issues:
    Chose a key that is unique and remains for a particular element
        <script>
            let goodDogs = [
                { id: 1, name: 'Roger'},
                { id: 2, name: 'Syd'}
            ]
        </script>

        {#each goodDogs as goodDog (goodDog.id)}    
            <li>{goodDog.name}</li>
        {/each}

        <!-- with the index -->
        {#each goodDogs as goodDog, index (goodDog.id)}
            <li>{goodDog.name}</li>
        {/each}

        we can also destructure it before like:
            {#each goodDogs as {name, color} (goodDog.id)}    

    we can loop over any array like structure(that has length property)
    can loop over generic iterables with each [...iterable].

    Svelte uses map internally

///////////////////////////////////////////////////////////////
await:
    Svelte provides us the {#await} syntax in templates to directly work with promises at the
    template level.
    We can wait for promises to resolve, and define a different UI for the various states of a
    promise: unresolved, resolved and rejected.

        <script>
            const fetchImage = (async () => {
                const response = await fetch('https://dog.ceo/api/breeds/image/random')
                return await response.json()
            })()
        </script>

        {#await fetchImage}
            <p>...waiting</p>
        {:then data}            //data is resolved promise value
            <img src={data.message} alt="Dog image" />
        {:catch error}          //error is rejected error value
            <p>An error occurred!</p>
        {/await}

    we can omit catch block if the promise does not reject

    if we want to show nothing while promise in pending:
        {#await promise then value}
            <p>the value is {value}</p>
        {/await}

//////////////////////////////////////////////////////////////////
A # character always indicates a block opening tag. A / character always indicates a 
block closing tag. A : character, as in {:else}, indicates a block continuation tag.

////////////////////////////////////////////////////////////////
dynamic classes:
    <button
        class={current === 'foo' ? 'active' : ''}
    >foo</button>

    over

    <button
        class:active={current === 'foo'}
    >foo</button>

    shorthand(if name of variable and class is same):
        class:big={big} is same as class:big