javascript is prototype based language.
Most languages like c++, java have class-based inheritance.
Javascript has prototype-based inheritance.

Every js object(function, object..) has a prototype from which it inherits properties and methods.
The prototype is also an object and hence inherits from another prototype and so on.this is prototype chain.
At the top of properties chain is Object.prototype which is initialised when a js program starts
executing.This prototype has methods like sort(), toString() etc.
Object.prototype inherits from null.(i.e. prototype of Object.prototype is null)

every JavaScript object has a prototype property (this property is empty by default)
This prototype property is not enumerable; that is, it isn’t accessible in a for/in loop but can accessed
by __proto__
The second concept with prototype in JavaScript is the prototype attribute. 
Think of the prototype attribute as a characteristic of the object; this characteristic tells us
the object’s “parent”. In simple terms: An object’s prototype attribute points to the 
object’s “parent”—the object it inherited its properties from. The prototype attribute is 
normally referred to as the prototype object, and it is set automatically when you create a new object.
To expound on this: Every object inherits properties from some other object, 
and it is this other object that is the object’s prototype attribute or “parent.” 
This prototype attribute can be accesses using __proto__
So, when a function is created, a new prototype is made and is empty by default
When we create an object, no new prototype is created, the object is just linked to already present
prototype from which it inherits properties.
all objects that inherit from another object also inherit a constructor property. 
And this constructor property is simply a property (like any variable) that holds or 
points to the constructor of the object.

__proto__ is same as [[Proto]]
__proto__ is name of property
[[Proto]] is name in specs(ECMA)

If an object is created with an object literal (var newObj = {}), it inherits properties 
from Object.prototype and we say its prototype object (or prototype attribute) 
is Object.prototype(constructor of created object is Object())
An object created with new Fruit () will have Fruit.prototype as its prototype and constructor
of object created is Fruit();


So prototype is just an object that contains properties and methods that the object it is bounded
to can have.An object has properties and methods equal to properties and methods present in the
object itself and what it inherits from its prototype and what its prototype inherits from parent
prototype and so on.
When we invoke property/method from an object, javascript first searches it in the object itself and
if not found, it tries searching in its prototype(which is stored as value of property of the object '__proto__')
and then its prototype's property....
so prototype chain works like scope chain

THERE CAN BE ONLY ONE PROTOTYPE CHAIN, i.e. NO MULTIPLE INHERITANCE

constructor functions are used to create prototypes
//////////////////////////////////////////////////////////////////////////////////////////////
new Array():    //built in
Array -> Array.prototype -> Object.prototype -> null

[1,2,3].slice() is same as
[].slice.call([1,2,3]) is same as
Array.prototype.slice.call([1,2,3])	because all arays inherit their properties/function from Array.prototype

new Food();     //not built in
Food -> Food.prototype -> Object.prototype -> null

All built-in constructors (Array (), Number (), String (), etc.) were created from the 
Object constructor, and as such their prototype is Object.prototype.
//////////////////////////////////////////////////////////////////////////////////////////////
Manipulating prototype of newly created constructor functions

function food(name, color, weight){
    this.name = name;                   //1st method of adding props
    this.color = color;
    this.weight = weight;
}
food.prototype.details = function(){    //2nd method of adding props
        return `${this.name} is of ${this.color} color`;
}
//this adds details method to food's prototype, which means that every food object will have access
to details method.
We should add methods to prototype instead of directly adding it to constructor function.
If we define methods in constructor function, then it will be created every time a new object is created.
Whereas if we define them in prototype, method are not created every time, instead they are just inherited.
This causes big performance issues.
So, the properties should be defined in constructor function using 'this' keyword because it has to
be unique for every object and should be created every time an object is created whereas functions/methods
should be placed inside prototypes because we don;t want them to be created every time but it should
be inherited by each object.

object_name.hasOwnProperty(prop_name) -> return true if prop is defined in object, return false if prop
is defined in its prototype or any other parent prototype
//////////////////////////////////////////////////////////////////////////////////////////////

Manipulating prototype of built in objects
Array.prototype.midElem = function(){
    return this[this.length/2];
}

now every array created will have this midElem method
Though it is not a good practice to do this, instead we should use a separate function for this
It is used when we want older versions of js to have new functions(backward compatibility)
//////////////////////////////////////////////////////////////////////////////////////////////

Extending the prototype chain :

function circle(radius){
    this.radius = radius;
}
circle.prototype.diameter = function(){
    return this.radius*2;
}

function semicircle(radius){
    Circle.call(this, radius);
    //call is used to access property or method of another object but with context of current one.
}
semicircle = Object.create(circle.prototype); 
//now semicircle inherits from prototype of circle i.e. we made semicircle a child of circle's prototype.[inheritance]
//Object.create is used to link prototype to objects.
//Object.create always return an empty object and bind that empty object to the parameter passed to
//Object.create()
//var proto = {}
//var obj = Object.create(proto);
//this returns an object that has its prototype equal to proto

//Object.create is used to extend prototype chain
//lhs object's prototype is bound to parameter passed
//but the parameter passed is also an object and hence has a linkage to any other object or Object.prototype

semicircle.prototype.constructor;  //will give circle which is a problem
semicircle.prototype.constructor = semicircle  //to solve the above problem
because we have replaced the original instance prototype where it had 
the correct value.

var sc = new semicircle(15);
Object.getPrototypeOf(sc) -> will give cirle
Now semicircle will have access to radius and diameter

can also be done using(without new keyword, though no difference in working or behaviour) :

var circle = {
    init:function(radius){      //behaves like constructor
        this.radius = radius;
    },
    diamater:function(){
        return this.radius*2;
    }
}
var semicircle = Object.create(circle);
semicircle.area = function(){
    return 3.14*this.radius*this.radius;
}

var s1 = Object.create(semicircle);
s1.init(3);
s1.area();
//////////////////////////////////////////////////////////////////////////////////////////////

Using class keywords to extend prototype chain :

class circle{
    constructor(radius){
        this.radius = radius;
    }

    diameter(){
        return this.radius*2;
    }
}

class semicircle extends circle{
    constructor(radius){
        super(radius)   //call constructor of parent class
    }
}
var sc = new semicircle(15);
sc.diameter()   //diamter fucntion is available as its parent class has this method.
//////////////////////////////////////////////////////////////////////////////////////////////

__proto__ -> Dunder proto(ES6)
gets the internal prototype linkage i.e. [[Prototype]]
this can also be retrieved using Object.getPrototypeOf(obj);
//////////////////////////////////////////////////////////////////////////////////////////////

If we define a function in object with a name that is already present in its above prototype chain
then instead of overriding already exiting method/prop, it creates a new one in the object and
from now on it will access the method present in it and not its prototype chain.
To still access the method/prop in its above chain from object's context, we do :
constructor_function_name.prototype.method_name.call(obj);
//////////////////////////////////////////////////////////////////////////////////////////////
 
while going above the prototype chain, 'this' does not change, 
it still remains what it was when first assigned i.e execution context remains same that is why
we can call a function present in prototype object from its different child objects from their
own context.
the value of this is always the object where the search for the method began, not where the
method was found. That allows the method to access all of the properties of the prototype chain.
//////////////////////////////////////////////////////////////////////////////////////////////

ways to add methods to prototype:
    1.  Circle.prototype.diameter = function(){
            return this.radius*2;
        }
    2.  Circle.prototype = {
            constructor : Circle,
            diameter : function(){
                return this.radius*2;
            }
        }

    in first one, we are adding methods to prototype
    whereas in second one, we are completely overriding the prototype object i.e. already existing
    methods on prototype will be deleted.
    disadvantage of overwriting the prototype is that the constructor property no longer points
    to the prototype, so we have to set it manually.
//////////////////////////////////////////////////////////////////////////////////////////////

    Object.create = function (o) {
        //It creates a temporary constructor F()
    function F() { }
        //And set the prototype of the this constructor to the parametric (passed-in) o object
        //so that the F() constructor now inherits all the properties and methods of o
    F.prototype = o;

        //Then it returns a new, empty object (an instance of F())
        //Note that this instance of F inherits from the passed-in (parametric object) o object. 
        //Or you can say it copied all of the o object's properties and methods
    return new F();
    }

    So Object.create is the way to use inheritance in js.

//////////////////////////////////////////////////////////////////////////////////////////////
Everything inside the constructor function that is defined without 'this' keyword is a private 
property and can not be accessed from outside or even from its object.
//////////////////////////////////////////////////////////////////////////////////////////////
properties of constructor function can not be accessed without creating an object
    function obj (age){
        this.age = 21;
        yoyo = "banati";    //private property
    }
    var a = new obj(21);

    console.log(obj.yoyo, obj.age);     //undefined, undefined
    console.log(a.yoyo, a.age);     //undefined, 21

//////////////////////////////////////////////////////////////////////////////////////////////
Prototypes are great for sharing data between objects: several objects get the same 
prototype, which holds all shared properties.

///////////////////////////////////////////////////////////////////////////
Prototype methods:
    Object.create()

    Object.getPrototypeOf(obj)
        returns the prototype of obj.

    Object.prototype.isPrototypeOf(obj)
        checks whether the receiver of the method is a (direct or indirect) prototype of obj.
        In other words: are the receiver and obj in the same prototype chain, and does obj
        come before the receive
            obj.isPrototypeOf(obj)  //false
    
    Object.prototype.propertyIsEnumerable(propKey)
        Returns true if the receiver has a property with the key propKey that is
        enumerable and false otherwise

///////////////////////////////////////////////////////////////////////////
Finding the object where a property is defined
    function getDefiningObject(obj, propKey) {
        while (obj && !{}.hasOwnProperty.call(obj, propKey)) {
            obj = Object.getPrototypeOf(obj);
        }
        return obj; //will be null at the top
    }

//////////////////////////////////////////////////////////////////////
The property constructor of obj.prototype points back to the constructor function.

Because the constructor property is inherited from the prototype by each instance, you
can use it to get the constructor of an instance:
    > var o = new C();
    > o.constructor
    [Function: C]

Make sure that for each constructor C, the following assertion holds:
    C.prototype.constructor === C

By default, every function f already has a property prototype that is set up correctly:
You should thus avoid replacing prototype object and only add properties to it:
    C.prototype.method = '' instead of C.prototype = {method: ''}

Calling a constructor function in strict mode will most probably give an error since
this is undefined

We return whatever object you need from a constructor.
Constructors don’t lock you in, so you can always change your mind as to whether 
constructor should return a direct instance or something else.

    function Expression(str) {
        if (...) {
            return new Addition(..);
        } else if (...) {
            return new Multiplication(...);
        } else {
            throw new ExpressionException(...);
        }
    }
    var expr = new Expression(someStr);

/////////////////////////////////////////////////////////////////////
Creating similar objects
    function Constr() {}
    var x = new Constr();
    var y = new x.constructor();

    or create a method for it:
        SuperConstr.prototype.createCopy = function () {
            return new this.constructor(...);
        };

///////////////////////////////////////////////////////////////////
Almost all objects are instances of Object, because Object.prototype is in their prototype
chain. But there are also objects where that is not the case. Here are two examples:
    > Object.create(null) instanceof Object
    false
    > Object.prototype instanceof Object
    false

////////////////////////////////////////////////////////////////
If we inherit a function and override a method in child prototype then this method
will be called always
To call the method present in parent prototype:
    Sub.prototype.methodB = function (x, y) {   //overriding methodB
        let superResult = Super.prototype.methodB.call(this, x, y);
        // Super is name of parent function
        return this.prop3 + ' ' + superResult;
    }

//////////////////////////////////////////////////////////////
The Inheritance Hierarchy of Built-in Constructors
Built-in constructors use the same subclassing appoach.
For example, Array is a subconstructor of Object.

///////////////////////////////////////////////////////////////
Antipattern: The Prototype Is an Instance of the Superconstructor

Before ECMAScript 5 and Object.create(), an often-used solution was to create the
subprototype by invoking the superconstructor:

    Sub.prototype = new Super();  // Don’t do this

This is not recommended under ECMAScript 5. The prototype will have all of Super’s
instance properties, which it has no use for. Therefore, it is better to use the
aforementioned pattern (involving Object.create()).

/////////////////////////////////////////////////////////////////
Generic Methods: Borrowing Methods from Prototypes

Sometimes instance prototypes have methods that are useful for more objects than
those that inherit from them.
    Object.prototype.hasOwnProperty.call(obj, 'propKey')
    or
    {}.hasOwnProperty.call(obj, 'propKey')

The advantage of second pattern is that it is less verbose.
But it is also less self-explanatory.
Performance should not be an issue (at least long term), as engines can
statically determine that the literals should not create objects.


Apply a string method to nonstrings. toUpperCase() converts the receiver to a
string and uppercases the result:
    > String.prototype.toUpperCase.call(true)
    'TRUE'


Using generic array methods on plain objects gives you insight into how they work:
    var fakeArray = { 0: 'a', 1: 'b', length: 2 };
    > Array.prototype.join.call(fakeArray, '-')
    'a-b'

    var obj = {};
    > Array.prototype.push.call(obj, 'hello');
    1
    > obj
    { '0': 'hello', length: 1 }

///////////////////////////////////////////////////////////////////////
Array-Like Objects and Generic Methods

There are some objects in JavaScript that feel like an array, but actually aren’t.
That means that while they have indexed access and a length property, they don’t
have any of the array methods (forEach(), push, concat(), etc.).

The special variable arguments:
    > function args() { return arguments }
    > var arrayLike = args('a', 'b');

    > arrayLike[0]
    'a'
    > arrayLike.length
    2
    But none of the array methods are available:

    > arrayLike.join('-')
    TypeError: object has no method 'join'

That’s because arrayLike is not an instance of Array
(and Array.prototype is not in the prototype chain):

Browser DOM node lists, which are returned by document.getElementsBy*()
(e.g., getElementsByTagName()), document.forms, and so on:

Strings, which are array-like, too:

    > 'abc'[1]
    'b'
    > 'abc'.length
    3

The term array-like can also be seen as a contract between generic array methods and
objects. The objects have to fulfill certain requirements; otherwise, the methods 
won’t work on them. The requirements are:

The elements of an array-like object must be accessible via square brackets and
integer indices starting at 0. All methods need read access, and some methods
additionally need write access. Note that all objects support this kind of
indexing: an index in brackets is converted to a string and used as a key to
look up a property value:

An array-like object must have a length property whose value is the number of its
elements. Some methods require length to be mutable (for example, reverse()).
Values whose lengths are immutable (for example, strings) cannot be used with
those methods.

Patterns for working with array-like objects

Turn an array-like object into an array:
    var arr = Array.prototype.slice.call(arguments);

But you can also borrow methods:
    Array.prototype.forEach.call(arguments, function (elem, i) {
        console.log(i+'. '+elem);
    });

////////////////////////////////////////////////////////////////////
In ECMAScript 6, the special property __proto__ will be disabled if Object.prototype
is not in the prototype chain of an object.(in most browsers)
    Object.create(null) //won’t have a __proto__ property on it