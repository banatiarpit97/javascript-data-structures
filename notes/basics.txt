JIT - just in time compiler.It defers the compilation.
        if it encounters a function definition, it will not compile the function right away.
        it just stores function in memory.
        function will be compiled when it is called the first time.

V8 takes Javascript code as input and compiles it to Machine code.
V8 is written is c++;

Javascript compiler takes 2 passes to run the source code.
in first pass, it does things as declaration, hoisting of var, function etc...
in first pass, it registers the variables(only declaration, no initialization) and 
also registers function(declaration and definition, if a normal function and a function expression)

and in seconds pass, it executes each line like an interpreter and does work like initialization, execution.
The difference from other interpreted languages is that,
in second pass js already knows what will come in next line or after that.

var a = "Arpit" is treated as 2 lines while compilation.
Firstly declaration(registering of variables) takes place and after that 
initialization.

hoisting - variable and function declaration are moved to top of the current scope
        the declaration part (var abc) is hoisted not the assignment part(=20).

Actually hoisting does not happen, its just a concept to understand 2 passes
of compiler.In first pass, all vars are registered and that is what we
call hoisting

Javascript does not interpret the inside/body of a function until its is called
only name of function is registered in first pass of compilation

Javascript is a single threaded language, it handles asynchronus calls using callback queue and event loop
//////////////////////////////////////////////////////////////////////////////////////////////////

MVC PATTERN :

const view = (() => {

})();

const model = (() => {

})();

const controller = ((view, model) => {

})(view, model);
//generally, instead of wrapping view, model in iife, they are defined in separate files.
////////////////////////////////////////////////////////////////////////////////////////
Even before first line of our code is executed, sevaral things happen :
a function+object combo named 'Object' is called and is linked to an object with the linkage '.prototype'
this object contains methods like toString, sort etc.
Object' is an object and it has property 'prototype' which is also an object and contains props/methods
like hasOwnProperty, ToLocalString, sort etc
All newly created object inherit from this 'prototype' i.e. why root prototype after null is
Object.prototype
Even Object.prototype has a property '__proto__' (because EVERY object has this property) and it
points to null
After creating Object(function+object), js created another function+object combo named 'Function'
object of 'Function' has a property 'prototype' because its is created using function.This property
has an object as value which contains props/methods like toString, call, apply, bind.
'Function.prototype' ia an object hance it will also have a property '__proto__' which points to
Object.prototype

Hence prototype chain of any object created using a 'function' keyword i.e. combo is:
object of combo created->Function.prototype->Object.prototype->null
/////////////////////////////////////
js is included at last in body becoz:
1. we need all the html elements to be rendered before we can start 
        working on them(otherwise gives error or will not find the elem)
2. if js is included at top then it will be processes first and html later
        this will delay the display of website
//////////////////////////////////
global variable of script file is available to all the script files declared after it
///////////////////////////////////////////////////////////////////
spa feels much faster than usual because we dont have to wait for client-server
communication
SEO does not work well in spa
SEO relies on js, hence might feel slow on old devices and some customers
have their js disabled in their browser