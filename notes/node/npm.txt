Creating a module requires package.json to be generated.
    npm init

Installing module
    npm install <Module Name>

You can install an old version of an npm package using the @ syntax:
    npm install <package>@<version>

By default, NPM installs any dependency in the local mode. Here local mode refers to the 
package installation in node_modules directory lying in the folder where Node application 
is present. Locally deployed packages are accessible via require() method.
Globally installed packages/dependencies are stored in system directory. Such dependencies 
can be used in CLI (Command Line Interface) function of any node.js but cannot be imported 
using require() in Node application directly.('-g' flag for global)

if a module is installed Globally, then we can run the command from cli directly
but if we install it locally, then we need to put that command in 'script' section
of package.json and then run the that script command from cli

you can use 'npm ls' command to list down all the locally installed modules and theor versions.
you can use 'npm ls -g' command to list down all the locally installed modules and theor versions.
you can use 'npm ls <Module Name>' command to see version of that module.
To get only your top-level packages (basically, the ones you told npm to install 
and you listed in the package.json), run 
    npm list --depth=0:

If you want to see what’s the latest available version of the package on the npm 
repository, run npm view [package_name] version:

command to uninstall a Node.js module - npm uninstall <Module Name>
command to update a Node.js module - npm update or npm update <Module Name>
command to search a Node.js module - npm search <Module Name>

Publish a module :
Once package.json is generated, use the following command to register yourself with 
NPM repository site using a valid email address - npm adduser
To Publish - npm publish
/////////////////////////////

--save or -S installs and adds the entry to the package.json file dependencies
--save-dev or -D installs and adds the entry to the package.json file devDependencies
///////////////////////////
Package.json
There are no fixed requirements of what should be in a package.json file, for an 
application. The only requirement is that it respects the JSON format, otherwise 
it cannot be read by programs that try to access its properties programmatically.

Versioning:
Given that using semver (semantic versioning) all versions have 3 digits, 
the first being the major release, the second the minor release and the third is 
the patch release, you have these rules:
you up the major version when you make incompatible API changes
you up the minor version when you add functionality in a backward-compatible manner
you up the patch version when you make backward-compatible bug fixes

~: if you write ~0.13.0, you want to only update patch releases: 0.13.1 is ok, but 0.14.0 is not.
^: if you write ^0.13.0, you want to update patch and minor releases: 0.13.1, 0.14.0and so on.
*: if you write *, that means you accept all updates, including major version upgrades.
>: you accept any version higher than the one you specify
>=: you accept any version equal to or higher than the one you specify
<=: you accept any version equal or lower to the one you specify
<: you accept any version lower to the one you specify
no symbol: you accept only that specific version you specify
latest: you want to use the latest version available

and you can combine most of the above in ranges, like this: 1.0.0 || >=1.1.0 <1.2.0, 
to either use 1.0.0 or one release from 1.1.0 up, but lower than 1.2.0.

//////
The package-lock.json file needs to be committed to your Git repository, 
so it can be fetched by other people, if the project is public or you have collaborators, 
or if you use Git as a source for deployments.

The dependencies versions will be updated in the package-lock.json file when you run npm update.
/////////////////
update packages:
If there is a new minor or patch release and we type npm update, the installed version 
is updated, and the package-lock.json file diligently filled with the new version.
package.json remains unchanged.
//
Running npm update won’t update the version of those. Major releases are never updated 
in this way because they (by definition) introduce breaking changes, and npm want to save 
you trouble.
To update to a new major version all the packages, install the npm-check-updates package globally:
    npm install -g npm-check-updates
then run it:
    ncu -u
This will upgrade all the version hints in the package.json file, to dependencies and 
devDependencies, so npm can install the new major version.
You are now ready to run the update:
    npm update
////////////////////////////////////////////////////
if you type npm install and the folder contains a package.json file, they are installed, as npm 
assumes this is a development deploy.
You need to set the --production flag (npm install --production) to avoid installing 
those development dependencies.
////////////////////////////////////////////////
npx lets you run code built with Node.js and published through the npm registry.

Node.js developers used to publish most of the executable commands as global packages, 
in order for them to be in the path and executable immediately.
This was a pain because you could not really install different versions of the same command.
Running npx commandname automatically finds the correct reference of the command inside 
the node_modules folder of a project, without needing to know the exact path, and without 
requiring the package to be installed globally and in the user’s path.

There is another great feature of npm, which is allowing to run commands without first installing them.

Run some code using a different Node.js version
Use the @ to specify the version, and combine that with the node npm package:
    npx node@6 -v #v6.14.3
    npx node@8 -v #v8.11.3

Run arbitrary code snippets directly from a URL
npx does not limit you to the packages published on the npm registry.
You can run code that sits in a GitHub gist, for example:
    npx https://gist.github.com/zkat/4bc19503fe9e9309e2bfaa2c58074d32

///////////////////////////////////////////////
deleting packages that are not present in package.json -> npm prune

///////////////////////////////////////////////////
npm home lodash     //open homepage/docs in browser
npm repo lodash     //opens git repo in browser