Node.js = Runtime Environment + JavaScript Library

A Node.js app is run by a single process, without creating a new thread for every request. 
Node provides a set of asynchronous I/O primitives in its standard library that will 
prevent JavaScript code from blocking and generally, libraries in Node.js are written 
using non-blocking paradigms, making a blocking behavior an exception rather than the normal.

This allows Node.js to handle thousands of concurrent connections with a single server 
without introducing the burden of managing threads concurrency, which would be a major 
source of bugs.

Node is probably the best stack when we want to do high throughput, low latency IO task
Node's architecture, async event loop complements the IO operations
But it is not best for performing heavy CPU processes.

All APIs of Node.js library are asynchronous, that is, non-blocking. 
It essentially means a Node.js based server never waits for an API to return data. 
The server moves to the next API after calling it and a notification mechanism of Events of Node.js 
helps the server to get a response from the previous API call.
In Node Application, any async function accepts a callback as the last parameter and a 
callback function accepts an error as the first parameter.
    fs.readFile('input.txt', function(err, data) {
        if(err){
            throw new Error();
        }
        console.log(data)
    })

Node.js uses a single threaded model with event looping. Event mechanism helps the server to 
respond in a non-blocking way and makes the server highly scalable as opposed to traditional 
servers which create limited threads to handle requests. Node.js uses a single threaded program 
and the same program can provide service to a much larger number of requests than traditional 
servers like Apache HTTP Server.

Node.js applications never buffer any data. These applications simply output the data in chunks.

The __filename represents the filename of the code being executed. 
This is the resolved absolute path of this code file. For a main program, this is not necessarily
the same filename used in the command line. The value inside a module is the path to that module file.

The __dirname represents the name of the directory that the currently executing script resides in.

in node window becomes global
document becomes process

non-blocking I/O - asynchronus operations

the file we require executes the moment we include it in our file.

'module' is an object that is available by default in node.
module has a property 'exports' which is also an object.
Whatever is present in module.exports can be accessed by any file that requires it.

npm init - makes package.json for our project

When we require a module, node first checks if there is core module(like fs, http) by that name,
if not found then it checks in the 'node_modules' folder
If we want to require our local files, we can't just give name of file even if it is same directory
we need to give a relative path like './notes'

passing command line args:
node file_name arg1 arg2 ...        //separated by space

process.argv -> array of command line arguements starting from 3rd elem
1st elem is path of node
2nd elem is name of the file

//////////////////////////////////////////////////////////////////////////////////////
can not write/append to response after calling res.end();

//////////////////////////////////////////////////////////////////////////////////////
Data is send to node server in chunks.Streams are used to send a part of data at a time so that
we don't have to wait for complete data before start the processing.
We can not directly access the chunk of data as it is not readable by us.
Buffers are used to store the chunks of data :

    const body = [];
    req.on('data', (chunk) => {
        body.push(chunk);
    })
    req.on('end', () => {
        const parsedBody = Buffer.concat(body);
        console.log(parsedBody);
    })
//////////////////////////////////////////////////////////////////////////////////////
a request is not interfered with another request because on each request a separate callback function
is called and every function has its different scope.

When we require a file/module, nodejs makes a cached copy of it.That means, if we change the 
imported file, we change the cached file and not the original one.So the changes will stay 
for that current session but will not be permanent.
//////////////////////////////////////////////////////////////////////////////////////
Node.js uses the CommonJS module system, while in the browser we are starting to 
see the ES Modules standard being implemented.
In CommonJS, modules are loaded synchronously, and processed in the order the JavaScript 
runtime finds them. This system was born with server-side JavaScript in mind, and is 
not suitable for the client-side (this is why ES Modules were introduced).

importing a module:
import {prop_name} from module_name;
import * as var_name from module_name;
/////////////////////////////////////////////////////////////////////////
node can be run in 2 ways:
    node js_file_name -> executes this file
    node -> starts repl
///////////////////////////////////////////////////////////////////////
call an api from node:
    const http = require('http');

    const requestDetails = {
        protocol: 'http',
        hostname: 'api.google.com',
        method: 'POST',
        path: '...',
        auth: '...',
        header: {...}
    }

    const req = http.request(requestDetails, function(res) {
        const status = res.statusCode;
        if(status == 200 || status == 201) {
            console.log('success');
        }
        else{
            console.log('failed');
        }
        res.on('data', (d) => {
            process.stdout.write(d)
        })
    })

    req.on('error', function(err){
        console.log(err);
    })

    req.write(payload); //if we want to send some payload with the request like we do in POST request

    req.end();
///////////////////////////////////////////////////////////////////////
To get logs related to particular module only:
    use NODE_DEBUG=http node index.js to start node app

Instead of using a built in module, we can provide our own modules/files:
    const util = require('util');
    const debug = util.debuglog('workers'); //workers is anme of our js file/module

    now replace every console.log with debug
    like console.log('aa') with debug('aa');
////////////////////////////////////////
exports:
    const car = {
        brand: 'Ford',
        model: 'Fiesta'
    }
    module.exports = car

    or

    const car = {
        brand: 'Ford',
        model: 'Fiesta'
    }
    exports.car = car

The first exposes the object it points to. The latter exposes the properties of the object it points to.
////////////////////////////////
callback functions in nodejs uses error-first approach i.e. first param of every callback would
be error. if there is an actual error, this parameter will be popoulated with the info otherwise
it would be 'null'
//////////////////////////////////////////////
convert js file to executable file:

    #!/usr/bin/env node     
    
    //this indicates that interpret this file node
    //OS will find the path for node and execute this file
    //should be first line of our file

    in terminal:
    sudo chmod u+x index.js     //to make it executable

    ./index.js  //no need to use node index.js
//////////////////////////////////////////////////////
Options request is sent automatically before any other request when client side and
server side code are running on different ports or urls
//////////////////////////////////////////////////////
PUT request is used when we want to update all the properties of the existing record
The data we send will replace the existing data completely so we need to send all
the properties whether or not they were changed

PATCH request is used when we want to update some of the properties of the existing record
The data we send will replace only the properties we send i.e. merge latest and previous data 
so we need to send only the properties that were changed

/////////////////////////////////////////////
variable defined in a file is local to it and not accessible to the files that import it.
Ifwe want to make a global variable we should it using global.a = 1;
but we should avoid using global variables.
global contain many properties like process and Buffer.