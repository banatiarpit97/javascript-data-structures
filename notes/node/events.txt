node uses async function to maintain the concurrency. 
Node uses observer pattern. Node thread keeps an event loop and after the 
completion of any task, it fires the corresponding event which signals the 
event listener function to get executed.

callback functions are called when an asynchronous function returns its result
where as event handling works on the observer pattern.


var events = require('events');

var eventEmitter = new events.EventEmitter();

// Bind the connection event with the handler
eventEmitter.on('connection', () => {
    console.log('connection successful')
}));

// Fire the connection event 
eventEmitter.emit('connection');

functions :

addListener(event, listener)
    Adds a listener at the end of the listeners array for the specified event. 
    No checks are made to see if the listener has already been added. Multiple calls passing the 
    same combination of event and listener will result in the listener being added multiple times. 
    Returns emitter, so calls can be chained.

on(event, listener)
    Adds a listener at the end of the listeners array for the specified event. 
    No checks are made to see if the listener has already been added. Multiple calls passing the 
    same combination of event and listener will result in the listener being added multiple times. 
    Returns emitter, so calls can be chained.

once(event, listener)
    Adds a one time listener to the event. This listener is invoked only the next time the event 
    is fired, after which it is removed. Returns emitter, so calls can be chained.

removeListener(event, listener)
    Removes a listener from the listener array for the specified event. 
    Caution âˆ’ It changes the array indices in the listener array behind the listener. 
    removeListener will remove, at most, one instance of a listener from the listener array. 
    If any single listener has been added multiple times to the listener array for the specified event, 
    then removeListener must be called multiple times to remove each instance. 
    Returns emitter, so calls can be chained.

removeAllListeners([event])
    Removes all listeners, or those of the specified event. It's not a good idea to remove 
    listeners that were added elsewhere in the code, especially when it's on an emitter 
    that you didn't create (e.g. sockets or file streams). 
    Returns emitter, so calls can be chained.

setMaxListeners(n)
    By default, EventEmitters will print a warning if more than 10 listeners are added for a 
    particular event. This is a useful default which helps finding memory leaks. 
    Obviously not all Emitters should be limited to 10. This function allows that to be increased. 
    Set to zero for unlimited.

listeners(event)
    Returns an array of listeners for the specified event.

emit(event, [arg1], [arg2], [...])
    Execute each of the listeners in order with the supplied arguments. 
    Returns true if the event had listeners, false otherwise.

'event'  CLASS METHODS :

listenerCount(emitter, event)
    Returns the number of listeners for a given event.