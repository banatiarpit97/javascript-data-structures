The Node.js path module is used to handle and transform files paths.
    var path =  require ("path")  

Given a path, you can extract information out of it using those methods:
dirname: get the parent folder of a file
basename: get the filename part
extname: get the file extension

    const notes = '/users/flavio/notes.txt'
    path.dirname(notes) // /users/flavio
    path.basename(notes) // notes.txt
    path.extname(notes) // .txt

You can get the file name without the extension by specifying a second argument to basename:
    path.basename(notes, path.extname(notes)) //notes







path.normalize(p)	
    It is used to normalize a string path, taking care of '..' and '.' parts.
        path.normalize('/users/flavio/..//test.txt') // /users/test.txt

path.join([path1][, path2][, ...])	
    It is used to join all arguments together and normalize the resulting path.
    If you specify a second parameter folder, resolve will use the first as a base for the second
        path.join('/', 'users', name, 'notes.txt') //'/users/flavio/notes.txt'

path.resolve([from ...], to)	
    It is used to resolve an absolute path.
        path.resolve('flavio.txt') //'/Users/flavio/flavio.txt'

But resolve and normalize will not check if the path exists. 
They just calculate a path based on the information they got.

path.isabsolute(path)	
    It determines whether path is an absolute path. an absolute path will 
    always resolve to the same location, regardless of the working directory.

path.relative(from, to)	
    It is used to solve the relative path from "from" to "to".
        require('path').relative('/Users/flavio', '/Users/flavio/test.txt') //'test.txt'

path.dirname(p)	
    It return the directory name of a path. It is similar to the unix dirname command

path.basename(p[, ext])	
    It returns the last portion of a path. It is similar to the Unix basename command.

path.extname(p)	
    It returns the extension of the path, from the last '.' to end of string 
    in the last portion of the path. if there is no '.' in the last portion of 
    the path or the first character of it is '.', then it returns an empty string.

path.parse(pathstring)	
    It returns an object from a path string.
    Object consist of:
        root: the root
        dir: the folder path starting from the root
        base: the file name + extension
        name: the file name
        ext: the file extension

path.format(pathobject)	
    It returns a path string from an object, the opposite of path.parse above.

