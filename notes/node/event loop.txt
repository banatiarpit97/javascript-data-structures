Your JavaScript code runs single threaded. There is just one thing happening at a time.

Generally, in most browsers there is an event loop for every browser tab, to make 
every process isolated and avoid a web page with infinite loops or heavy processing 
to block your entire browser.
The environment manages multiple concurrent event loops, to handle API calls for example. 
Web Workers run in their own event loop as well.

The call stack
The call stack is a LIFO queue (Last In, First Out).
The event loop continuously checks the call stack to see if there’s any function that needs to run.
While doing so, it adds any function call it finds to the call stack and executes each one in order.

eg - 
    const baz = () => console.log('baz')
    const foo = () => {
        console.log('foo')
        baz()
    }
    foo()

    call stack for this would be:

    foo() -> console.log('foo'); -> foo() -> baz() -> console.log('baz') -> baz() -> foo() -> empty
             foo()                           foo()    baz()                 foo()
                                                      foo()

///////////////////////////////////////////////////////
The Message Queue
When setTimeout() is called, the Browser or Node.js starts the timer. Once the timer expires, 
in this case immediately as we put 0 as the timeout, the callback function is put in the Message Queue.

The Message Queue is also where user-initiated events like click and keyboard events or 
fetch responses are queued before your code has the opportunity to react to them. Or also 
DOM events like onLoad.

The loop gives priority to the call stack. It first processes everything it finds in the call 
stack, and once there’s nothing in there, it goes to pick up things in the message queue.

We don’t have to wait for functions like setTimeout, fetch or other things to do their own 
work, because they are provided by the browser, and they live on their own threads.

//////////////////////////////////////////////////////////
ES6 Job Queue
ECMAScript 2015 introduced the concept of the Job Queue, which is used by Promises 
(also introduced in ES6/ES2015). It’s a way to execute the result of an async function 
as soon as possible, rather than being put at the end of the call stack.

Promises that resolve before the current function ends will be executed right after 
the current function.

    const foo = () => {
        console.log('foo')
        setTimeout(bar, 0)
        new Promise((resolve, reject) =>
            resolve('should be right after baz, before bar')
        ).then(resolve => console.log(resolve))
        baz()
    }
    foo()

    prints:
    foo
    baz
    should be right after foo, before bar
    bar

////////////////////////////////////////////////////////////////
process.nextTick()
It interacts with the event loop in a special way.
Every time the event loop takes a full trip, we call it a tick.

When we pass a function to process.nextTick(), we instruct the engine to invoke this 
function at the end of the current operation, before the next event loop tick starts:

    process.nextTick(() => {
        //do something
    })
The event loop is busy processing the current function code.
When this operation ends, the JavaScript engine runs all the functions passed to nextTick 
calls during that operation.

It’s the way we can tell the JavaScript engine to process a function asynchronously 
(after the current function), but as soon as possible.

Calling setTimeout(() => {}, 0) will execute the function in the next tick, much later 
than when using nextTick().
