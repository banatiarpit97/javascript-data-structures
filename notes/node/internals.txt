Node is a runtime environment that is a combination of javascript and C++
Since js does not have power to access internals of our machine or OS, it uses C++ for 
those tasks.
Our js code interacts with the C++ code already written for us, C++ uses 'libuv' library
to interact with our machine internals.
JS uses built-in labels that trigger functions in C++

libuv is used to access things like:
Network socket - to send and receive messages over internet
File system - access storage of computer
CPU - for hashing/cryptography
Kernel - IO management 

///////////////////////////////////////////

const http = require('http');
//C++ modules that we want to use in our js code is fetched using 'require' keyword

const server = http.createServer((req, res) => {
    console.log(req);
    res.end('hello');
});
server.listen(80);

http is a module written in C++ to send and receive msgs over internet.
Things that happen when above code is run:
1. C++ http module is invoked
2. Module opens a Network socket from client's machine to server's machine
    All the Network request and response are handle by network card in our machine, so c++ code
    accesses this network card through some interface to let the client connect to server machine.
3. We pass a function in http.createServer. This function goes to C++ module which AUTO RUNS this function
    whenever a new requests comes in to server.
    This is necessaryy becoz, our js code does not know when a request comes in.Requests comes in
    through network card which is accessible to only c++ code. and we also cannot echo our reply
    continuosly since it will block our event loop. So we give this task to C++ code.
4.  When a new request comes in, C++ code auto runs our passed function
5.  When it executes the function, it populates the function parameters with 2 objects that can be used
    in our js code.
    First object is the request object, this object conatins properties like url, method... which
    tells us about the type of request.The http request packet which is just a text file is parsed by
    the c++ code and an object is made from that info.
    The second object is the response object. This object conatins functions like 'end' that can be 
    called from js code to populate the response http packet for the request. 

/////////////////////////////
libuv takes care of threads that handle 'fs' processes but does not takes care of threads
that handle IO/socket functions.IO or socket threads are handled by OS.
///////////////////////////
since c++ is incharge of running many function automatically, there needs to be some rules
that decide when are these auto run functions allowed to run in js
These auto run functions are executed by c++ but they are executed in js thread only, so while
executing them, we need to make sure that we don't disturb the execution of any other function
running in js thread.

Whenever a function is executed by c++, it's callback is not directly put in call stacks of i.e. not
executed immediately, it is first put into callback queue and then event loop checks these
queues if there is nothing left to run in call stack. Then function in these queues are put into
call stack for execution.

There are 6 callback queues and they are checked by event loop according to their priority
1. Micro queue-1
    stores functions passed in process.nextTick()

2. Micro queue-2
    stores function passed to promises

3. timer queue
    stores functions passed to setTimeout and setInterval

4. IO queue
    stores 95% of the auto run function
    functions from fs, http etc
    //this is little different from others, when event loop is at this stage, it doesn't just look
    and move forward, it waits here for a while for any pending OS tasks, pending operations or timers
    that are about to complete

    This can also be divided in 2 parts:
        1. pending OS tasks - networking, http
        2. pending operations - like fs, timers etc

5. check queue
    stores function passed to setImediate

6. close handle queue
    stores functions related to close events like closing of file

So event loop first see if call stack is empty and has nothing to executed
if yes, then checks:
1   Micro queues(1 & 2)
2   timer queue
3   Micro queues(1 & 2)
4   IO queue
5   Micro queues(1 & 2)
6   check queue
7   Micro queues(1 & 2)
8   close handle queue

becoz micro queues are checked before checking any other queue

A tick is one complete circle of event loop i.e checking every queue