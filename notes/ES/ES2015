let and const

var a = 0
If you forget to add var you will be assigning a value to an undeclared variable, 
and the results might vary.

In modern environments, with strict mode enabled, you will get an error. 
In older environments (or with strict mode disabled) this will initialize the 
variable and assign it to the global object.
If you don’t initialize the variable when you declare it, it will have the 
undefined value until you assign a value to it.

var a //typeof a === 'undefined'

A variable initialized with var outside of any function is assigned to the 
global object, has a global scope and is visible everywhere. A variable 
initialized with var inside a function is assigned to that function, it's 
local and is visible only inside it, just like a function parameter.

Any variable defined in a function with the same name as a global variable takes 
precedence over the global variable, shadowing it.

It’s important to understand that a block (identified by a pair of curly braces) 
does not define a new scope. A new scope is only created when a function is created, 
because var does not have block scope, but function scope.

Using let
let is a new feature introduced in ES2015 and it's essentially a block scoped 
version of var. Its scope is limited to the block, statement or expression where 
it's defined, and all the contained inner blocks.

Defining let outside of any function - contrary to var - does not create a global variable.

Using const
Variables declared with var or let can be changed later on in the program, 
and reassigned. Once a const is initialized, its value can never be changed again, 
and it can't be reassigned to a different value.

const a = 'test'
We can’t assign a different literal to the a const. We can however mutate a if 
it's an object that provides methods that mutate its contents.
const does not provide immutability, just makes sure that the reference can't be changed.

const has block scope, same as let.
/////////////////////////////////////////////////////////////////////////////

Arrow Functions
    const myFunction = () => {
        //...
    }
If the function body contains just a single statement, you can omit the 
brackets and write all on a single line:
    const myFunction = () => doSomething()

Parameters are passed in the parentheses:
    const myFunction = (param1, param2) => doSomething(param1, param2)
If you have one (and just one) parameter, you could omit the parentheses completely:
    const myFunction = param => doSomething(param)

Implicit return
Arrow functions allow you to have an implicit return: values are returned 
without having to use the return keyword.

It works when there is a one-line statement in the function body:
    const myFunction = () => 'test'

Another example, when returning an object, remember to wrap the curly brackets 
in parentheses to avoid it being considered the wrapping function body brackets:
    const myFunction = () => ({ value: 'test' })

How 'this' works in arrow functions
It’s important to clarify this concept because arrow functions behave very 
differently compared to regular functions.

When defined as a method of an object, in a regular function this refers to the object.

The this scope with arrow functions is inherited from the execution context. 
An arrow function does not bind this at all, so its value will be looked up in the 
call stack.

const car = {
  model: 'Fiesta',
  manufacturer: 'Ford',
  fullName: () => {
    return `${this.manufacturer} ${this.model}`
  }
}
car.fullName    //undefined undefined
Due to this, arrow functions are not suited as object methods.

Arrow functions cannot be used as constructors either, when instantiating an object 
will raise a TypeError.

This is also a problem when handling events. DOM Event listeners set this to be 
the target element, and if you rely on this in an event handler, a regular 
function is necessary:
    const link = document.querySelector('#link')
        link.addEventListener('click', () => {
        // this === window
    })
    const link = document.querySelector('#link')
        link.addEventListener('click', function() {
        // this === link
    })
///////////////////////////////////////////////////////////////////////////////
Classes
ECMAScript committee decided to sprinkle syntactic sugar on top of prototypical 
inheritance so that it resembles how class-based inheritance works in other popular 
implementations.

This is important: JavaScript under the hood is still the same, and you can access 
an object prototype in the usual way.

    class Person {
        constructor(name) {
            this.name = name
        }
        hello() {
            return 'Hello, I am ' + this.name + '.'
        }
    }
A class has an identifier, which we can use to create new objects using new ClassIdentifier().

When the object is initialized, the constructor method is called, with any parameters passed.

A class also has as many methods as it needs. In this case hello is a method and can 
be called on all objects derived from this class:
    const flavio = new Person('Flavio')
    flavio.hello()

Class inheritance
A class can extend another class, and objects initialized using that class 
inherit all the methods of both classes.
If the inherited class has a method with the same name as one of the classes 
higher in the hierarchy, the closest method takes precedence:

Classes do not have explicit class variable declarations, but you must initialize 
any variable in the constructor.

Inside a class, you can reference the parent class calling super().

Static methods
Static methods are executed on the class instead:

    class Person {
        static genericHello() {
            return 'Hello'
        }
    }
    Person.genericHello() //Hello

Private methods
JavaScript does not have a built-in way to define private or protected methods.

Getters and setters
You can add methods prefixed with get or set to create a getter and setter, 
which are two different pieces of code that are executed based on what you are 
doing: accessing the variable, or modifying its value.

    class Person {
        constructor(name) {
            this._name = name
        }
        set name(value) {
            this._name = value
        }
        get name() {
            return this._name
        }
    }
If you only have a getter, the property cannot be set, and any attempt at 
doing so will be ignored:

If you only have a setter, you can change the value but not access it from the 
outside:
//////////////////////////////////////////////////////////////////////////////

Default parameters
We can add a default value for param1 if the function is invoked without 
specifying a parameter:
    const doSomething = (param1 = 'test') => {
    }

    this is like -> if(param1 === undefined) {param1 = 'test'}
    //only works for undefined, even if null passed, default ags won't apply

Once upon a time, if we had to pass an object of options to a function, 
in order to have default values of those options if one of them was not defined, 
you had to add a little bit of code inside the function:
    const colorize = (options) => {
        if (!options) {
            options = {}
        }
        const color = ('color' in options) ? options.color : 'yellow'
    }
With destructuring you can provide default values, which simplifies the code a lot:
    const colorize = ({ color = 'yellow' }) => {
        ...
    }
If no object is passed when calling our colorize function, similarly we can assign an empty object by default:
    const spin = ({ color = 'yellow' } = {}) => {
        ...
    }
//////////////////////////////////////////////////////////////////////////////
Template Literals
The syntax at a first glance is very simple, just use backticks instead of single or double quotes:
    const a_string = `something`

they offer a great syntax to define multiline strings
they provide an easy way to interpolate variables and expressions in strings
they allow you to create DSLs with template tags (DSL means domain specific 
language, and it’s for example used in React by Styled Components, 
to define CSS for a component)

Multiline strings
Pre-ES6, to create a string spanning over two lines you had to use the \ character 
at the end of a line:
    const string =
    'first part \
    second part'
This allows to create a string on 2 lines, but it’s rendered on just one line:
    first part second part

To render the string on multiple lines as well, you explicitly need to add \n at 
the end of each line, like this:
    const string =
    'first line\n \
    second line'
or
    const string = 'first line\n' + 'second line'

Template literals make multiline strings much simpler.
Once a template literal is opened with the backtick, you just press enter to 
create a new line, with no special characters, and it’s rendered as-is:

Keep in mind that space is meaningful, so doing this:
    const string = `First
                    Second`
is going to create a string like this:
    First
                    Second

an easy way to fix this problem is by having an empty first line, and appending 
the trim() method right after the closing backtick, which will eliminate any 
space before the first character:
    const string = `
    First
    Second`.trim()

Interpolation
Template literals provide an easy way to interpolate variables and expressions 
into strings.

You do so by using the ${...} syntax:
    const var = 'test'
    const string = `something ${var}` //something test

inside the ${} you can add anything, even expressions:
    const string = `something ${1 + 2 + 3}`
    const string2 = `something ${foo() ? 'x' : 'y'}`

Template tags
Tagged templates is one feature that might sound less useful at first for you, 
but it’s actually used by lots of popular libraries around, like Styled Components 
or Apollo, the GraphQL client/server lib, so it’s essential to understand how it works.

In Styled Components template tags are used to define CSS strings:
    const Button = styled.button`
        font-size: 1.5em;
        background-color: black;
        color: white;
    `
In Apollo template tags are used to define a GraphQL query schema:
    const query = gql`
    query {
        ...
    }
    `
The styled.button and gql template tags highlighted in those examples are just functions:
    function gql(literals, ...expressions) {}
this function returns a string, which can be the result of any kind of computation.

literals is an array containing the template literal content tokenized by the 
expressions interpolations.
expressions contains all the interpolations.

If we take an example above:
    const string = `something ${1 + 2 + 3}`
literals is an array with two items. The first is something, the string until the 
first interpolation, and the second is an empty string, the space between the end 
of the first interpolation (we only have one) and the end of the string.

expressions in this case is an array with a single item, 6.

The function that is passed those values can do anything with them, and this is 
the power of this kind feature.

The most simple example is replicating what the string interpolation does, by joining literals and expressions:
    const interpolated = interpolate`I paid ${10}€`

and this is how interpolate works
    function interpolate(literals, ...expressions) {
        let string = ``
        for (const [i, val] of expressions) {
            string += literals[i] + val
        }
        string += literals[literals.length - 1]
        return string
        }
///////////////////////////////////////////////////////////////////////////
Destructuring assignments
Given an object, you can extract just some values and put them into named variables:
    const person = {
        firstName: 'Tom',
        lastName: 'Cruise',
        actor: true,
        age: 54, //made up
    }
    const {firstName: name, age} = person
name and age contain the desired values.

The syntax also works on arrays:
    const a = [1,2,3,4,5]
    const [first, second] = a
This statement creates 3 new variables by getting the items with index 0, 1, 4 from 
the array a:
    const [first, second, , , fifth] = a
////////////////////////////////////////////////////////////////////////    
Enhanced Object Literals
Instead of doing
    const something = 'y'
        const x = {
            something: something
        }
you can do
    const something = 'y'
    const x = {
        something
    }
////////////////////////////////////////////////////////////////////
Prototype
A prototype can be specified with
    const anObject = { y: 'y' }
    const x = {
        __proto__: anObject
    }
//////////////////////////////////////////////////////////////////
super()
    const anObject = { y: 'y', test: () => 'zoo' }
    const x = {
        __proto__: anObject,
        test() {
            return super.test() + 'x'
        }
    }
    x.test() //zoox
///////////////////////////////////////////////////////////////////
Dynamic properties
    const x = {
        ['a' + '_' + 'b']: 'z'
    }
    x.a_b //z
/////////////////////////////////////////////////////////////////
For-of loop
ES5 back in 2009 introduced forEach() loops. While nice, they offered no way 
to break, like for loops always did.
ES2015 introduced the for-of loop, which combines the conciseness of forEach with 
the ability to break:
    for (const v of ['a', 'b', 'c']) {
        console.log(v);
    }

//get the index as well, using `entries()`
    for (const [i, v] of ['a', 'b', 'c'].entries()) {
        console.log(index) //index
        console.log(value) //value
    }
Notice the use of const. This loop creates a new scope in every iteration, 
so we can safely use that instead of let.

The difference with for...in is:
    for...of iterates over the property values
    for...in iterates the property names
///////////////////////////////////////////////////////////////////////////
Promises
A promise is commonly defined as a proxy for a value that will eventually 
become available.

Once a promise has been called, it will start in pending state. 
This means that the caller function continues the execution, while it waits for 
the promise to do its own processing, and give the caller function some feedback.

At this point, the caller function waits for it to either return the promise in a 
resolved state, or in a rejected state, but as you know JavaScript is asynchronous, 
so the function continues its execution while the promise does it work.

Creating a promise
The Promise API exposes a Promise constructor, which you initialize using 
new Promise():
  let done = true
  const isItDoneYet = new Promise((resolve, reject) => {
    if (done) {
      const workDone = 'Here is the thing I built'
      resolve(workDone)
    } else {
      const why = 'Still working on something else'
      reject(why)
    }
  })

Using resolve and reject we can communicate back a value, in the above case we just 
return a string, but it could be an object as well.

Consuming a promise
  const isItDoneYet = new Promise()
  const checkIfItsDone = () => {
    isItDoneYet
      .then(ok => {
        console.log(ok)
      })
      .catch(err => {
        console.error(err)
      })
  }

Chaining promises
A promise can be returned to another promise, creating a chain of promises.
A great example of chaining promises is given by the Fetch API, a layer on top of 
the XMLHttpRequest API, which we can use to get a resource and queue a chain of 
promises to execute when the resource is fetched.

The Fetch API is a promise-based mechanism, and calling fetch() is equivalent to 
defining our own promise using new Promise().

  const status = response => {
    if (response.status >= 200 && response.status < 300) {
      return Promise.resolve(response)
    }
    return Promise.reject(new Error(response.statusText))
  }
  const json = response => response.json()
  fetch('/todos.json')
    .then(status)
    .then(json)
    .then(data => {
      console.log('Request succeeded with JSON response', data)
    })
    .catch(error => {
      console.log('Request failed', error)
    })

Running fetch() returns a response, which has many properties, and within those we 
reference:
status, a numeric value representing the HTTP status code
statusText, a status message, which is OK if the request succeeded
response also has a json() method, which returns a promise that will resolve with 
the content of the body processed and transformed into JSON.

So given those premises, this is what happens: the first promise in the chain is a 
function that we defined, called status(), that checks the response status and if 
it's not a success response (between 200 and 299), it rejects the promise.

This operation will cause the promise chain to skip all the chained promises 
listed and will skip directly to the catch() statement at the bottom, logging the 
Request failed text along with the error message.

If that succeeds instead, it calls the json() function we defined. Since the previous
promise, when successful, returned the response object, we get it as an input to the 
second promise.

In this case, we return the data JSON processed, so the third promise receives the 
JSON directly:
  .then((data) => {
    console.log('Request succeeded with JSON response', data)
  })

Handling errors
When anything in the chain of promises fails and raises an error or rejects the 
promise, the control goes to the nearest catch() statement down the chain.

  new Promise((resolve, reject) => {
    throw new Error('Error')
  }).catch(err => {
    console.error(err)
  })
// or
  new Promise((resolve, reject) => {
    reject('Error')
  }).catch(err => {
    console.error(err)
  })

Cascading errors
If inside the catch() you raise an error, you can append a second catch() to handle 
it, and so on.
  new Promise((resolve, reject) => {
    throw new Error('Error')
  })
    .catch(err => {
      throw new Error('Error')
    })
    .catch(err => {
      console.error(err)
    })

Orchestrating promises
Promise.all()
If you need to synchronize different promises, Promise.all() helps you define a list 
of promises, and execute something when they are all resolved.
  const f1 = fetch('/something.json')
  const f2 = fetch('/something2.json')
  Promise.all([f1, f2])
    .then(res => {
      console.log('Array of results', res)
    })
    .catch(err => {
      console.error(err)
    })

The ES2015 destructuring assignment syntax allows you to also do
  Promise.all([f1, f2]).then(([res1, res2]) => {
    console.log('Results', res1, res2)
  })

Promise.race()
Promise.race() runs as soon as one of the promises you pass to it resolves, and it 
runs the attached callback just once with the result of the first promise resolved.
  const promiseOne = new Promise((resolve, reject) => {
    setTimeout(resolve, 500, 'one')
  })
  const promiseTwo = new Promise((resolve, reject) => {
    setTimeout(resolve, 100, 'two')
  })
  Promise.race([promiseOne, promiseTwo]).then(result => {
    console.log(result) // 'two'
  })
//////////////////////////////////////////////////////////////////
Modules
ES Modules is the ECMAScript standard for working with modules.

Modules are very cool, because they let you encapsulate all sorts of functionality, 
and expose this functionality to other JavaScript files, as libraries.

The syntax to import a module is:
  import package from 'module-name'

while CommonJS uses
  const package = require('module-name')

A module is a JavaScript file that exports one or more values 
(objects, functions or variables), using the export keyword. 

  export default str => str.toUpperCase()
In this example, the module defines a single, default export, so it can be an 
anonymous function. Otherwise it would need a name to distinguish it from other 
exports.
Now, any other JavaScript module can import the functionality offered by this file by importing it.
  import toUpperCase from './uppercase.js'
and we can use it:
  toUpperCase('test') //'TEST'

An HTML page can add a module by using a <script> tag with the special 
type="module" attribute:
  <script type="module" src="index.js"></script>

Note: this module import behaves like a defer script load.
It’s important to note that any script loaded with type="module" is loaded in 
strict mode.

You can also use an absolute path for the module import, to reference modules 
defined on another domain:
  import toUpperCase from 'https://flavio-es-modules-example.glitch.me/uppercase.js'

This is also valid import syntax:
  import { toUpperCase } from '/uppercase.js'
  import { toUpperCase } from '../uppercase.js'

This is not:
  import { toUpperCase } from 'uppercase.js'
  import { toUpperCase } from 'utils/uppercase.js'

It’s either absolute, or has a ./ or / before the name.

Other import/export options

  export default str => str.toUpperCase()
This creates one default export. 
In a file however you can export more than one thing, by using this syntax:

  const a = 1
  const b = 2
  const c = 3
  export { a, b, c }

Another module can import all those exports using
  import * from 'module'

You can import just a few of those exports, using the destructuring assignment:
  import { a } from 'module'
  import { a, b } from 'module'

You can rename any import, for convenience, using as:
  import { a, b as two } from 'module'

You can import the default export, and any non-default export by name
  import React, { Component } from 'react'

CORS
Modules are fetched using CORS. This means that if you reference scripts from 
other domains, they must have a valid CORS header that allows cross-site loading 
(like Access-Control-Allow-Origin: *)

What about browsers that do not support modules?
Use a combination of type="module" and nomodule:
  <script type="module" src="module.js"></script>
  <script nomodule src="fallback.js"></script>
/////////////////////////////////////////////////////////////////////////

New String methods
Any string value got some new instance methods:

repeat()
codePointAt()
repeat()

Repeats the strings for the specified number of times:
  'Ho'.repeat(3) //'HoHoHo'
Returns an empty string if there is no parameter, or the parameter is 0. 
If the parameter is negative you'll get a RangeError.

codePointAt()
This method can be used to handle Unicode characters that cannot be represented by 
a single 16-bit Unicode unit, but need 2 instead.

Using charCodeAt() you need to retrieve the first, and the second, and combine them. 
Using codePointAt() you get the whole character in one call.

For example, this Chinese character “𠮷” is composed by 2 UTF-16 (Unicode) parts:
  "𠮷".charCodeAt(0).toString(16) //d842
  "𠮷".charCodeAt(1).toString(16) //dfb7

If you create a new character by combining those unicode characters:
  "\ud842\udfb7" //"𠮷"
You can get the same result sign codePointAt():
  "𠮷".codePointAt(0) //20bb7
If you create a new character by combining those unicode characters:
  "\u{20bb7}" //"𠮷"
More on Unicode and working with it in my Unicode guide.
///////////////////////////////////////////////////////////////////////////

New Object methods

Object.is() determines if two values are the same value
Object.assign() used to shallow copy an object
Object.setPrototypeOf sets an object prototype

Object.is()
  Object.is(a, b)

The result is always false unless:

a and b are the same exact object
a and b are equal strings (strings are equal when composed by the same characters)
a and b are equal numbers (numbers are equal when their value is equal)
a and b are both undefined, both null, both NaN, both true or both false
0 and -0 are different values in JavaScript, so pay attention in this special case (convert all to +0 using the + unary operator before comparing, for example).

Object.assign()
Introduced in ES2015, this method copies all the enumerable own properties of one 
or more objects into another.
Its primary use case is to create a shallow copy of an object.

  const copied = Object.assign({}, original)

Being a shallow copy, values are cloned, and objects references are copied 
(not the objects themselves), so if you edit an object property in the original 
object, that’s modified also in the copied object, since the referenced inner 
object is the same:

  const original = {
    name: 'Fiesta',
    car: {
      color: 'blue'
    }
  }
  const copied = Object.assign({}, original)
  original.name = 'Focus'
  original.car.color = 'yellow'
  copied.name //Fiesta
  copied.car.color //yellow

I mentioned “one or more”:
  const wisePerson = {
    isWise: true
  }
  const foolishPerson = {
    isFoolish: true
  }
  const wiseAndFoolishPerson = Object.assign({}, wisePerson, foolishPerson)
  console.log(wiseAndFoolishPerson) //{ isWise: true, isFoolish: true }

Object.setPrototypeOf()
Set the prototype of an object. Accepts two arguments: the object and the prototype.

  Object.setPrototypeOf(object, prototype)
  const animal = {
    isAnimal: true
  }
  const mammal = {
    isMammal: true
  }
  mammal.__proto__ = animal
  mammal.isAnimal //true
  const dog = Object.create(animal)
  dog.isAnimal  //true
  console.log(dog.isMammal)  //undefined
  Object.setPrototypeOf(dog, mammal)
  dog.isAnimal //true
  dog.isMammal //true
///////////////////////////////////////////////////////////////////

The spread operator
You can expand an array, an object or a string using the spread operator ...

  const a = [1, 2, 3]

you can create a new array using
  const b = [...a, 4, 5, 6]

You can also create a copy of an array using
  const c = [...a]

This works for objects as well. Clone an object with:
  const newObj = { ...oldObj }

Using strings, the spread operator creates an array with each char in the string:
  const hey = 'hey'
  const arrayized = [...hey] // ['h', 'e', 'y']

This operator has some pretty useful applications. The most important one is the 
ability to use an array as function argument in a very simple way:
  const f = (foo, bar) => {}
  const a = [1, 2]
  f(...a)

(In the past you could do this using f.apply(null, a) but that's not as nice and readable.)

The rest element is useful when working with array destructuring:
  const numbers = [1, 2, 3, 4, 5]
  [first, second, ...others] = numbers

and spread elements:
  const numbers = [1, 2, 3, 4, 5]
  const sum = (a, b, c, d, e) => a + b + c + d + e
  const sum = sum(...numbers)

ES2018 introduces rest properties, which are the same but for objects.
/////////////////////////////////////////////////////////////////////////

Set
A Set is a collection of objects or primitive types (strings, numbers or booleans), 
and you can think of it as a Map where values are used as map keys, 
with the map value always being a boolean true.

Initialize a Set
  const s = new Set()

Add items to a Set
  s.add('one')
  s.add('two')

A set only stores unique elements, so calling s.add('one') multiple times won't 
add new items.
You can’t add multiple elements to a set at the same time. 
You need to call add() multiple times.

Check if an item is in the set
  s.has('one') //true
  s.has('three') //false

Delete an item from a Set by key
  s.delete('one')

Determine the number of items in a Set
  s.size

Delete all items from a Set
  s.clear()

Iterate the items in a Set
Use the keys() or values() methods - they are equivalent:
  for (const k of s.keys()) {
    console.log(k)
  }
  for (const k of s.values()) {
    console.log(k)
  }

The entries() method returns an iterator, which you can use like this:
  const i = s.entries()
  console.log(i.next())
calling i.next() will return each element as a { value, done = false } 
object until the iterator ends, at which point done is true.

You can also use the forEach() method on the set:
  s.forEach(v => console.log(v))

or you can just use the set in a for..of loop:
  for (const k of s) {
    console.log(k)
  }

Initialize a Set with values
  const s = new Set([1, 2, 3, 4])

Convert the Set keys into an array
  const a = [...s.keys()]
// or
  const a = [...s.values()]
//////////////////////////////////////////////////////////////////////////
A WeakSet
A WeakSet is a special kind of Set.

In a Set, items are never garbage collected. A WeakSet instead lets all its 
items be freely garbage collected. Every key of a WeakSet is an object. 
When the reference to this object is lost, the value can be garbage collected.

Here are the main differences:
you cannot iterate over the WeakSet
you cannot clear all items from a WeakSet
you cannot check its size

A WeakSet is generally used by framework-level code, and only exposes these methods:
  add()
  has()
  delete()
///////////////////////////////////////////////////////////////////////

Map
A Map data structure allows us to associate data to a key.

Before ES6
Before its introduction, people generally used objects as maps, by associating 
some object or value to a specific key value:
  const car = {}
  car['color'] = 'red'
  car.owner = 'Flavio'
  console.log(car['color']) //red
  console.log(car.color) //red
  console.log(car.owner) //Flavio
  console.log(car['owner']) //Flavio

Enter Map
ES6 introduced the Map data structure, providing us a proper tool to handle this 
kind of data organization.

A Map is initialized by calling:
  const m = new Map()

Add items to a Map
  m.set('color', 'red')
  m.set('age', 2)

Get an item from a map by key
  const color = m.get('color')

Delete an item from a map by key
  m.delete('color')

Delete all items from a map
  m.clear()

Check if a map contains an item by key
  const hasColor = m.has('color')

Find the number of items in a map
  const size = m.size

Initialize a map with values
  const m = new Map([['color', 'red'], ['owner', 'Flavio'], ['age', 2]])

Map keys
Just like any value (object, array, string, number) can be used as the value of the 
key-value entry of a map item, any value can be used as the key, even objects.

If you try to get a non-existing key using get() out of a map, it will return undefined.

Weird situations you’ll almost never find in real life
  const m = new Map()
  m.set(NaN, 'test')
  m.get(NaN) //test
  const m = new Map()
  m.set(+0, 'test')
  m.get(-0) //test

Iterate over map keys
  for (const k of m.keys()) {
    console.log(k)
  }

Iterate over map values
  for (const v of m.values()) {
    console.log(v)
  }

Iterate over map key, value pairs
  for (const [k, v] of m.entries()) {
    console.log(k, v)
  }

which can be simplified to
  for (const [k, v] of m) {
    console.log(k, v)
  }
///////////////////////////////////////////////////////////////////////////

WeakMap
A WeakMap is a special kind of map.

In a map object, items are never garbage collected. A WeakMap instead lets all its 
items be freely garbage collected. Every key of a WeakMap is an object. 
When the reference to this object is lost, the value can be garbage collected.

Here are the main differences:
you cannot iterate over the keys or values (or key-values) of a WeakMap
you cannot clear all items from a WeakMap
you cannot check its size

A WeakMap exposes those methods, which are equivalent to the Map ones:
  get(k)
  set(k, v)
  has(k)
  delete(k)

The use cases of a WeakMap are less evident than the ones of a Map, 
and you might never find the need for them, but essentially it can be used to 
build a memory-sensitive cache that is not going to interfere with garbage collection,
or for careful encapsulation and information hiding.
//////////////////////////////////////////////////////////////////////////

Generators
Generators are a special kind of function with the ability to pause itself, 
and resume later, allowing other code to run in the meantime.

The code decides that it has to wait, so it lets other code “in the queue” to run, 
and keeps the right to resume its operations “when the thing it’s waiting for” is done.

All this is done with a single, simple keyword: yield. When a generator contains 
that keyword, the execution is halted.

A generator can contain many yield keywords, thus halting itself multiple times, 
and it's identified by the *function keyword, which is not to be confused with the 
pointer dereference operator used in lower level programming languages such as 
C, C++ or Go.

Generators enable whole new paradigms of programming in JavaScript, allowing:
2-way communication while a generator is running
long-lived while loops which do not freeze your program

  function *calculator(input) {
      var doubleThat = 2 * (yield (input / 2))
      var another = yield (doubleThat)
      return (input * doubleThat * another)
  }

We initialize it with
  const calc = calculator(10)

Then we start the iterator on our generator:
  calc.next()

This first iteration starts the iterator. The code returns this object:
  {
    done: false
    value: 5
  }
What happens is: the code runs the function, with input = 10 as it was passed in 
the generator constructor. It runs until it reaches the yield, and returns the 
content of yield: input / 2 = 5. So we got a value of 5, and the indication that 
the iteration is not done (the function is just paused).

In the second iteration we pass the value 7:
  calc.next(7)

and what we got back is:
  {
    done: false
    value: 14
  }
7 was placed as the value of doubleThat. 
Important: you might read like input / 2 was the argument, but that's just the 
return value of the first iteration. We now skip that, and use the new input 
value, 7, and multiply it by 2.

We then reach the second yield, and that returns doubleThat, so the returned value 
is 14.

In the next, and last, iteration, we pass in 100
  calc.next(100)
and in return we got
  {
    done: true
    value: 14000
  }
As the iteration is done (no more yield keywords found) and we just return 
(input * doubleThat * another) which amounts to 10 * 14 * 100.
////////////////////////////////////////////////////////////////////////
