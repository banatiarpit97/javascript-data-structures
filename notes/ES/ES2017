String padding
The purpose of string padding is to add characters to a string, 
so it reaches a specific length.

ES2017 introduces two String methods: padStart() and padEnd().
    padStart(targetLength [, padString])
    padEnd(targetLength [, padString])
//////////////////////////////////////////////////////////////////////
Object.values()
This method returns an array containing all the object own property values.

    const person = { name: 'Fred', age: 87 }
    Object.values(person) // ['Fred', 87]

Object.values() also works with arrays:
    const people = ['Fred', 'Tony']
    Object.values(people) // ['Fred', 'Tony']
//////////////////////////////////////////////////////////////////////
Object.entries()
This method returns an array containing all the object own properties, 
as an array of [key, value] pairs.
    const person = { name: 'Fred', age: 87 }
    Object.entries(person) // [['name', 'Fred'], ['age', 87]]

Object.entries() also works with arrays:
    const people = ['Fred', 'Tony']
    Object.entries(people) // [['0', 'Fred'], ['1', 'Tony']]
//////////////////////////////////////////////////////////////////////
Object.getOwnPropertyDescriptors()
This method returns all own (non-inherited) properties descriptors of an object.

Any object in JavaScript has a set of properties, and each of these properties 
has a descriptor.

A descriptor is a set of attributes of a property, and it’s composed by a subset 
of the following:
    value: the value of the property
    writable: true the property can be changed
    get: a getter function for the property, called when the property is read
    set: a setter function for the property, called when the property is set to a value
    configurable: if false, the property cannot be removed nor any attribute can be changed, except its value
    enumerable: true if the property is enumerable

Object.getOwnPropertyDescriptors(obj) accepts an object, and returns an object 
with the set of descriptors.

In what way is this useful?
ES6 gave us Object.assign(), which copies all enumerable own properties 
from one or more objects, and return a new object.

However there is a problem with that, because it does not correctly copies 
properties with non-default attributes.
If an object for example has just a setter, it’s not correctly copied to a new 
object, using Object.assign().

For example with
    const person1 = {
        set name(newName) {
            console.log(newName)
        }
    }
This won’t work:
    const person2 = {}
    Object.assign(person2, person1)

But this will work:
    const person3 = {}
    Object.defineProperties(person3,
    Object.getOwnPropertyDescriptors(person1))
    
As you can see with a simple console test:
    person1.name = 'x'
    "x"
    person2.name = 'x'
    person3.name = 'x'
    "x"
person2 misses the setter, it was not copied over.

The same limitation goes for shallow cloning objects with Object.create().
/////////////////////////////////////////////////////////////////////////////
Trailing commas
This feature allows to have trailing commas in function declarations, 
and in functions calls:
    const doSomething = (var1, var2,) => {
        //...
    }
doSomething('test2', 'test2',)
This change will encourage developers to stop the ugly “comma at the start 
of the line” habit.
///////////////////////////////////////////////////////////////////////////////
Async functions
JavaScript evolved in a very short time from callbacks to promises (ES2015), 
and since ES2017 asynchronous JavaScript is even simpler with the async/await syntax.

Async functions are a combination of promises and generators, and basically, 
they are a higher level abstraction over promises. Let me repeat: async/await is 
built on promises.

They reduce the boilerplate around promises, and the “don’t break the chain” 
limitation of chaining promises.

They make the code look like it’s synchronous, but it’s asynchronous and 
non-blocking behind the scenes.

Promise all the things
Prepending the async keyword to any function means that the function will return a 
promise.
Even if it’s not doing so explicitly, it will internally make it return a promise.

This is why this code is valid:
    const aFunction = async () => {
        return 'test'
    }
    aFunction().then(alert) // This will alert 'test'

and it’s the same as:
    const aFunction = async () => {
        return Promise.resolve('test')
    }
    aFunction().then(alert) // This will alert 'test'

The code is much simpler to read
As you can see in the example above, our code looks very simple. 
Compare it to code using plain promises, with chaining and callback functions.

And this is a very simple example, the major benefits will arise when the code 
is much more complex.

Multiple async functions in series
Async functions can be chained very easily, and the syntax is much more 
readable than with plain promises:

    const promiseToDoSomething = () => {
        return new Promise(resolve => {
            setTimeout(() => resolve('I did something'), 10000)
        })
    }
    const watchOverSomeoneDoingSomething = async () => {
        const something = await promiseToDoSomething()
        return something + ' and I watched'
    }
    const watchOverSomeoneWatchingSomeoneDoingSomething = async () => {
        const something = await watchOverSomeoneDoingSomething()
        return something + ' and I watched as well'
    }
    watchOverSomeoneWatchingSomeoneDoingSomething().then(res => {
        console.log(res)
    })

Will print:
I did something and I watched and I watched as well

Easier debugging
Debugging promises is hard because the debugger will not step over asynchronous code.
Async/await makes this very easy because to the compiler it’s just like synchronous 
code.
////////////////////////////////////////////////////////////////////////////////
Shared Memory and Atomics
WebWorkers are used to create multithreaded programs in the browser.
They offer a messaging protocol via events. Since ES2017, you can create a 
shared memory array between web workers and their creator, using a SharedArrayBuffer.

Since it’s unknown how much time writing to a shared memory portion takes to 
propagate, Atomics are a way to enforce that when reading a value, any kind of 
writing operation is completed.

Any more detail on this can be found in the spec proposal, which has since been 
implemented.

