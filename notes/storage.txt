types of storage:
cookies
local storage(web storage)
session storage(web storage)

advantages of local and session over cookies:
more data can be stored
data is not sent to server, reducing risks
syntax is easy
Cookies are sent to server on every request

/////////////////////////////////////////////////////////////////////
local storage:
data stored has no expiration date
available on all pages of that domain
not deleted even when browser is closed

    localStorage.setItem("key", "value");
    var lastname = localStorage.getItem("key");
    or
    var lastname = localStorage.key;
    localStorage.removeItem("key");
    localStorage.clear();

///////////////////////////////////////////////////////////////////
session storage:
same as local storage except that it stores data for only 1 session
data is deleted when browser is closed(or even when TAB is closed)
Session storage is not deleted when tab is reloaded

    sessionStorage.setItem("key", "value");
    var lastname = sessionStorage.getItem("key");
    or
    var lastname = sessionStorage.key;
    sessionStorage.removeItem("key");
    sessionStorage.clear();

Check support for localStorage and sessionStorage:
    if(window.localStorage){

    }
    if(window.sessionStorage){
        
    }

localStorage and sessionStorage follows same origin policy i.e. they will only work
on same protocol, host and port
if we set the storage on http://a.com then it won't be available on the foll:
    https://a.com, http://blog.a.com

we can only store string in the storage, so if we want to store object/arrays, then 
we need to JSON.stringify it while storing and JSON.parse while retreiving
///////////////////////////////////////////////////////////////////
Cookies:
    document.cookie = "username=John Doe";
    document.cookie = "username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 UTC";
    document.cookie = "username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 UTC; path=/";

cookies can be read like this:
    var x = document.cookie;

By default, the cookie is deleted when the browser is closed but you can change this
behavior by setting expiry date (in UTC time).
By default, the cookie belongs to a current page. But you can tell the browser what
path the cookie belongs to using a path parameter.

Deleting a cookie:
You don't have to specify a cookie value when you delete a cookie.
Just set the expires parameter to a passed date:
    document.cookie = "username=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";

expiry date (in UTC time). By default, the cookie is deleted when the browser is closed
path the cookie belongs to. By default, the cookie belongs to the current page.

The document.cookie property looks like a normal text string. But it is not.

Even if you write a whole cookie string to document.cookie, when you read it out 
again, you can only see the name-value pair of it.

If you set a new cookie, older cookies are not overwritten. The new cookie is 
added to document.cookie,

Cookie attributes:
    Secure - Cookie will be sent in HTTPS transmission only.
    HttpOnly- Don't allow scripts to access cookie. You can set both of the Secure and HttpOnly.
    Domain- specify the hosts to which the cookie will be sent.
    Path - create scopes, cookie will be sent only if the path matches.
    Expires - indicates the maximum lifetime of the cookie.