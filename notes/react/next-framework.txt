Features:
Hot Code Reloading: Next.js reloads the page when it detects any change saved to disk.

Automatic Routing: any URL is mapped to the filesystem, to files put in the pages folder, 
	and you don’t need any configuration (you have customization options of course).

Single File Components: using styled-jsx, completely integrated as built by the same team, 
	it’s trivial to add styles scoped to the component.

Server Rendering: you can (optionally) render React components on the server side, 
	before sending the HTML to the client.

Ecosystem Compatibility: Next.js plays well with the rest of the JavaScript, 
	Node and React ecosystem.

Automatic Code Splitting: pages are rendered with just the libraries and JavaScript that they need, no more.

Prefetching: the Link component, used to link together different pages, supports a prefetch 
	prop which automatically prefetches page resources (including code missing due to code splitting) in the background.

Dynamic Components: you can import JavaScript modules and React Components dynamically.

Static Exports: using the next export command, Next.js allows you to export a fully static site from your app.
///////////////////////////////////////////////////////////////////////////////////////////////
npm install next
yarn add next

{
  "scripts": {
    "dev": "next",
    "build": "next build",
    "start": "next start"
  }
}

Create an empty pages folder, and run the command 'npm run dev', and Next.js will start up a server on localhost:3000.

Next.js handles other error types as well, like 500, 404 errors for example.

Next.js uses a declarative pages structure, which is based on the filesystem structure.
Simply put, pages are inside a pages folder, and the page URL is determined by the page file name. 
The filesystem is the pages API.
//////////////////////////////////////////////////////////////////////////////////////////////////////
As you can see, the HTML generated by the component is sent directly in the page source. 
It’s not rendered client-side, but instead it’s rendered on the server.
/////////////////////////////////////////////////////////////////////////////////////////////////////
Server rendering is very convenient in your first page load, for all the reasons we saw above, 
but when it comes to navigating inside the website, client-side rendering is key to speeding up 
the page load and improving the user experience.

Next.js provides a Link component you can use to build links. Try linking the two pages above.

<Link href="/contact">
   <a>Contact me!</a>
</Link>

<Link href={`/post?title=${props.title}`}>

You can use clean URLs without query parameters. The Next.js Link component helps us by 
accepting an as attribute, which you can use to pass a slug:
<Link as={`/${props.slug}`} href={`/post?title=${props.title}`}>

This is client-side navigation working correctly, with complete support for the History API, 
which means your users back button won’t break.
//////////////////////////////////////////////////////////////////////////////////////////////////////
Next.js by default provides support for styled-jsx
export default () => (
  <div>
    <p>
      <a href="mailto:my@email.com">Contact us!</a>
    </p>
    <style jsx>{`
      p {
        font-family: 'Courier New';
      }
      a {
        text-decoration: none;
        color: black;
      }
      a:hover {
        opacity: 0.8;
      }
    `}</style>
  </div>
)

Styles are scoped to the component, but you can also edit global styles adding global to the style element:
<style jsx global>{`
////////////////////////////////////////////////////////////////////////////////////////////////////////
The company behind Next.js provides an awesome hosting service for Node.js applications, called Now.

Of course they integrate both their products so you can deploy Next.js apps seamlessly, 
once you have Now installed, by running the now command in the application folder.

Behind the scenes Now sets up a server for you, and you don’t need to worry about anything, 
just wait for your application URL to be ready.
///////////////////////////////////////////////////////////////
Plugins
Next.js has a list of plugins at https://github.com/zeit/next-plugins
