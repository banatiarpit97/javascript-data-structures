The term “render prop” refers to a technique for sharing code between React components using a prop whose value is a function.

A component with a render prop takes a function that returns a React element and calls it instead of implementing
its own render logic.
    <DataProvider render={data => (
        <h1>Hello {data.target}</h1>
    )}/>

It’s important to remember that just because the pattern is called “render props” you don’t have to use a prop named
render to use this pattern. In fact, any prop that is a function that a component uses to know what to render is
technically a “render prop”.
    <Mouse children={mouse => (
        <p>The mouse position is {mouse.x}, {mouse.y}</p>
    )}/>

And remember, the children prop doesn’t actually need to be named in the list of “attributes” in your JSX element.
Instead, you can put it directly inside the element!
    <Mouse>
        {mouse => (
            <p>The mouse position is {mouse.x}, {mouse.y}</p>
        )}
    </Mouse>

    class Mouse extends React.Component {
        constructor(props) {
            super(props);
            this.handleMouseMove = this.handleMouseMove.bind(this);
            this.state = { x: 0, y: 0 };
        }

        handleMouseMove(event) {
            this.setState({ x: event.clientX, y: event.clientY });
        }

        render() {
            return (
                    <div style={{ height: '100vh' }} onMouseMove={this.handleMouseMove}>
                        {this.props.children(this.state)}
                    </div>
            );
        }
    }


////////////////////////////////////////////////////////////////////
Using a render prop can negate the advantage that comes from using React.PureComponent if you create the function
inside a render method. This is because the shallow prop comparison will always return false for new props, and each
render in this case will generate a new value for the render prop.