avoid putting conditionals in render function of component, instead create a separate
function that has conditional statements in it and return the required jsx and call this
function from 'render'

    renderContent(){
        if(){
            return ...
        }
        else if(){
            return ...
        }
    }

    render(){
        return (
            return <div>{this.renderContent()}</div>
        );
    }
////////////////////////////////////////////////////////////////////////
if we want force to re-render a component and that component is getting its data from an array 
or object, we don't need to change or add properties of that object, instead we can just clone
that object into a new one using spread operator like b={...b}.

Since react/redux checks refernce of an array/object to detect changes and re-render a component,
we can re-render a component without changing its properties
////////////////////////////////////////////////////////////////////////
if we want to render something based on width of screen, we can make a
separate component fior that:
    const WindowWidth = ({children}) => {
        const [width, setWidth] = useState(0);

        useEffect(() => {
            setWidth(window.innerWidth);
            window.addEventListener('resize', ({ target }) => setWidth(target.innerWidth));
        }, []);

        return children(width);
    }

    and use it like:
        <WindowWidth>
            {width => width > 600 ? <div>big screen</div> : <div>small screen</div>}
        </WindowWidth>

////////////////////////////////////////////////////////////////////
We can pass complete props to a child using desctructuring:
    const App = (props) => {
        return <Child {...props} />
    }

this can also be used to pass attributes to a element:
    //props = {name: 'arpit', className="big", 'data-age'="20"}
    const App = ({name, ...props}) => { 
        return <div {...props}>{name}</div>
    }

this can be used to make some proxy elements:
    Buttons are everywhere in web apps. And every one of them must have the 
    type attribute set to "button". Writing this attribute hundreds of times is error prone. 

    const Button = props => (<button type="button" {...props}>)

    and use like:
        <Button className="CTA">Send Money</Button>

//////////////////////////////////////////////////////////////////
React.memo
Class components can bail out from rendering when their input props are the same using 
PureComponent or shouldComponentUpdate. Now you can do the same with function components 
by wrapping them in React.memo.

    const MyComponent = React.memo(function MyComponent(props) {
        /* only rerenders if props change */
    });

React.PureComponent skip prop updated for whole component subtree so make sure that
all children are also pure.

React.memo only checks for prop updates, so if our component has useState
or useContext then it will rerender it state or context changes

///////////////////////////////////////////////////////////////////
If we want to add a functionality of functional components in class components without changing the 
component itself, we can do so by wrapping the class with a function:
    class original extends React.component{

    }
    export default wrapped = ({props}) => {
        return <original {...props} />
    }
    Now in 'default' functional component, we can use hooks, react.memo etc

    same can be done if we want to wrap a functional component in class component

//////////////////////////////////////////////////////////////////
We need a toggle state so many times, so create a custom hook for the same:
    const useToggle = (initialValue = false) => 
                            React.useReducer(prevValue => !prevValue, initialValue)

    Usage:
    const [value, toggleValue] = useToggle();
    <button onClick={toggleValue} />

//////////////////////////////////////////////////////////////////
If we are passing a funcion to useState for initial value then be sure to DON't call
this function, useState will call this function itself.
If we call this function in useState like getInitialValue()), then getInitialValue
will be called on every render(even though state variable will retain its value from last render)
but the function will be called everytime.
If we just pass the function, then useState will call it and getInitialValue will be called only
once in the starting like useState(getInitialValue)

//////////////////////////////////////////////////////////////////
