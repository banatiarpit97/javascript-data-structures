During the lifetime of a component, there’s a series of events that gets 
called, and to each event you can hook and provide custom functionality.

First, there are 3 phases in a React component lifecycle:

Mounting
Updating
Unmounting
/////////////////////////////////////////////////////////////////////
Mounting
When mounting you have 4 lifecycle methods before the component is mounted 
in the DOM: the constructor, getDerivedStateFromProps, render and componentDidMount.

Constructor
The constructor is the first method that is called when mounting a component.
You usually use the constructor to set up the initial state using this.state = ....

getDerivedStateFromProps()
When the state depends on props, getDerivedStateFromProps can be used to 
update the state based on the props value.

It was added in React 16.3, aiming to replace the componentWillReceiveProps 
deprecated method.

In this method you haven’t access to this as it's a static method.

Returns an object with the updated elements of the state 
(or null if the state does not change)

render()
From the render() method you return the JSX that builds the component interface.

componentDidMount()
This method is the one that you will use to perform API calls, or process operations on the DOM.
///////////////////////////////////////////////////////////////////////////////
Updating
When updating you have 5 lifecycle methods before the component is mounted in 
the DOM: the getDerivedStateFromProps, shouldComponentUpdate, render, 
getSnapshotBeforeUpdate and componentDidUpdate.

getDerivedStateFromProps()
See the above description for this method.

shouldComponentUpdate()
This method returns a boolean, true or false. You use this method to tell 
React if it should go on with the rerendering, and defaults to true. 
You will return false when rerendering is expensive and you want to have 
more control on when this happens.

render()
See the above description for this method.

getSnapshotBeforeUpdate()
In this method you have access to the props and state of the previous render, 
and of the current render.

componentDidUpdate()
This method is called when the component has been updated in the DOM. 
Use this to run any 3rd party DOM API or call APIs that must be updated 
when the DOM changes.
/////////////////////////////////////////////////////////////////////
Unmounting
In this phase we only have one method, componentWillUnmount.

componentWillUnmount()
The method is called when the component is removed from the DOM. 
Use this to do any sort of cleanup you need to perform.
//////////////////////////////////////////////////////////////////
Legacy
If you are working on an app that uses componentWillMount, componentWillReceiveProps 
or componentWillUpdate, those were deprecated in React 16.3 and you should 
migrate to other lifecycle methods.
////////////////////////////////////////////////////////////////
shoulComponentUpdate(nextProps, nextState){
    if(...){
        return true;
    }
    else if(...){
        return false;
    }
}

if we return true from above function, component will re render and update
if we return false from above function, component will not re render and update even if
there is some change in its DOM.
//////////////////////////////////////////////////////////////////
lifecycle events can be declared as async functions and then await keyword can
be used inside it.
//////////////////////////////////////////////////////////////
componentDidUpdate needs to be built carefully
in componentDidUpdate we would do some update and hence the component will re render again
and hence componentDidUpdate will trigger.
So the cycle will continue, we sould always check whether to update the component or not
The componentDidUpdate will receive a paramter namely prevProps.
We compare the prevProps and current(this.props) and if they are diff, only then we will update the
component or call the API.
//////////////////////////////////////////////////////////////
    