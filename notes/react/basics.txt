start with react:
npx create-react-app <name-of-app>

updating a parent component re renders all its children because parent needs to
pass the updated props(Even of the props does not change, children will still re render)
i.e. why we use redux and connect the components to store rather than to each other

if a state variable is passed as props to child component and if state variable changes
then props also change automatically in child component

Keep the static content in different component from dynamic content because if they are
in same component then static content will be rendered unnecessarily

components made using pure components can have only props as an arguement
pure functions can have many inner functions in which 'render' should be definately there
pure functions can not have lifecycle events and their own state.

we can not use semicolon when we split the return statement into multiple lines
    return <div>hey</div>;

    return (
        <div>hey</div>
    );

either starting parenthesis or some content should be on the same line as 
return keyword otherwise function would return null.
////////////////////////////////////////////////////////////////////

render root component
    import React from 'react'
    import ReactDom from 'react-dom'
    import App from './App'

    ReactDom.render(<App />, document.querySelector("#root"));
////////////////////////////////////////////////////////////////////

we can directly pass an array of html/jsx elements to return statement of render
and it will automatically display it without any map function:
    const imgList = (props) => {
        const images = props.images.map((img) => {
            return <img src={img.url} key={img.id} />
        })

        return <div>{images}</div>      //images is an array here
    }

To efficiently render an array or to prevent react from re-rendering an element from
list again, we need to a key attribute to all the elements of the list.
This key should be uniwue for each element in list.
This key attribute should be present on the root element of the repeating html/jsx template