React.lazy and Suspense form the perfect way to lazily load a dependency 
and only load it when needed.

Let’s start with React.lazy. You use it to import any component:

import React from 'react'
const TodoList = React.lazy(() => import('./TodoList'))
export default () => {
  return (
    <div>
      <TodoList />
    </div>
  )
}
the TodoList component will be dynamically added to the output as soon as 
it’s available. Webpack will create a separate bundle for it, and will 
take care of loading it when necessary.
///////////////////////////////////////////////////////////////////////////////

Suspense is a component that you can use to wrap any lazily loaded component:

import React from 'react'
const TodoList = React.lazy(() => import('./TodoList'))
export default () => {
  return (
    <div>
      <React.Suspense>
        <TodoList />
      </React.Suspense>
    </div>
  )
}
It takes care of handling the output while the lazy loaded component is 
fetched and rendered.

Use its fallback prop to output some JSX or a component output:

<React.Suspense fallback={<p>Please wait</p>}>
    <TodoList />
</React.Suspense>
//////////////////////////////////////////////////////////////////////////
All this plays well with React Router:

import React from 'react'
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom'
const TodoList = React.lazy(() => import('./routes/TodoList'))
const NewTodo = React.lazy(() => import('./routes/NewTodo'))
const App = () => (
  <Router>
    <React.Suspense fallback={<p>Please wait</p>}>
      <Switch>
        <Route exact path="/" component={TodoList} />
        <Route path="/new" component={NewTodo} />
      </Switch>
    </React.Suspense>
  </Router>
)