Error boundaries are React components that catch JavaScript errors anywhere in their 
child component tree, log those errors, and display a fallback UI instead of the 
component tree that crashed. Error boundaries catch errors during rendering, in 
lifecycle methods, and in constructors of the whole tree below them.

When an error occurs, we render null in place of the tree that threw an error. 
This sometimes breaks parent components that don’t expect their refs to be empty. 
It also doesn’t work to recover from errors on the server since the Did lifecycle 
methods don’t fire during server-side rendering.

Error boundaries do not catch errors for:
    Event handlers
    Asynchronous code (e.g. setTimeout or requestAnimationFrame callbacks)
    Server side rendering
    Errors thrown in the error boundary itself (rather than its children)


Use static getDerivedStateFromError() to render a fallback UI after an error has 
been thrown. Use componentDidCatch() to log error information.

    class ErrorBoundary extends React.Component {
        constructor(props) {
            super(props);
            this.state = { hasError: false };
        }

        static getDerivedStateFromError(error) {
            // Update state so the next render will show the fallback UI.
            return { hasError: true };
        }

        componentDidCatch(error, errorInfo) {
            // You can also log the error to an error reporting service
            logErrorToMyService(error, errorInfo);
        }

        render() {
            if (this.state.hasError) {
                return <h1>Something went wrong.</h1>;
            }

            return this.props.children; 
        }
    }

    Usage: 
        <ErrorBoundary>
            <MyWidget />
        </ErrorBoundary>


errors that were not caught by any error boundary will result in unmounting of the 
whole React component tree.
Note that error boundaries only catch errors in the components below them in the tree. 
An error boundary can’t catch an error within itself. If an error boundary fails trying to 
render the error message, the error will propagate to the closest error boundary above it. 
This, too, is similar to how catch {} block works in JavaScript.

If we put ErrorBoundary inside a component's render method, then any error within that component
will not caught in that ErrorBoundary.
To correct this, wrap the component inside ErrorBoundary while exporting like a HOC

We can have a single ErrorBoundary at top level of our app or many ErrorBoundary for group of
components, like separate ErrorBoundary for side bar, main content and a footer.
Having many ErrorBoundary has an advantage that if an error occurs then only that group of components
will be replaced by the fallback ui.