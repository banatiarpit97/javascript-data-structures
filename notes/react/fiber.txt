“Fiber Makes React smarter instead of faster…”

The Process of Updating the DOM is taken care by Reconciliation. In the latest version of React, the core algorithm
of the reconciliation is totally re-written to the new algorithm called Fiber.


The type of work usually depends on the type of React element. For example, for a class component, React needs to
create an instance, while it doesn’t do that for a functional component. As you know, we have many kinds of elements
in React, e.g. class and functional components, host components (DOM nodes), portals etc. The type of React element
is defined by the first parameter to the createElement function.

for the class component like App it calls lifecycle methods and the render method, whereas for the span host
component (DOM node) it performs DOM mutation. So each React element is converted into a Fiber node of corresponding
type that describes the work that needs to be done.


When our code passes thorugh JSX compiler(i.e. at build time), our components get converted to react.createElement calls.
These react.createElement calls are further converted to object at runtime like:
    [
        {
            $$typof: Symbol(React.element),
            type: 'button',
            key: '1',
            ref: null,
            props: {
                children: "Increment",  //btn text
                onClick: () => {}
            }
        },
        {
            $$typof: Symbol(React.element),
            type: 'span',
            props: {
                children: 0,
            }
        }
    ]

there can be other fields on this obj like:
    {
        stateNode: new ClickCounter,
            //Holds the reference to the class instance of a component, a DOM node or other React element type
            associated with the fiber node. like new HTMLSpanElement
        type: ClickCounter,
            // Defines the function or class or HTML tag associated with this fiber
        alternate: null,
            //The alternate of the current fiber is the work-in-progress, and the alternate of the work-in-progress is the current fiber.
            //A fiber's alternate is created lazily using a function called cloneFiber. Rather than always creating a
            new object, cloneFiber will attempt to reuse the fiber's alternate if it exists, minimizing allocations.
        key: null,
        updateQueue: null,
            //A queue of state updates, callbacks and DOM updates
        memoizedState: {count: 0},
            //State of the fiber that was used to create the output. When processing updates it reflects the state
            that’s currently rendered on the screen.
        pendingProps: {},
            //Props that have been updated from new data in React elements and need to be applied to child components
            or DOM elements.
        memoizedProps: {},
            //Props of the fiber that were used to create the output during the previous render.
            When the incoming pendingProps are equal to memoizedProps, it signals that the fiber's previous output can
            be reused, preventing unnecessary work.
        tag: 1,
            //Defines the type of the fiber. It’s used in the reconciliation algorithm to determine what work needs to be done
        effectTag: 0,
        nextEffect: null,
        child: ...,
        sibling: ...
        return: ...
    }

During the reconciliation every React Element returned from the render is merged in to the tree of fiber nodes.
Unlike React Elements fiber aren’t re-created on every render, these are mutable Data Structures.

Besides the tree of React elements, the framework has always had a tree of internal instances
(components, DOM nodes etc.) used to keep the state.Starting from version 16, React rolled out a new implementation
of that internal instances tree and the algorithm that manages it code-named Fiber.
Basically there are two trees, one is virtual DOM that looks like the array above and the other is of fiber nodes
kept by react internally to create Virtual DOM every time.

When a React element is converted into a fiber node for the first time, React uses the data from the element to create
a fiber in the createFiberFromTypeAndProps function. In the consequent updates React reuses the fiber node and just
updates the necessary properties using data from a corresponding React element. React may also need to move the node
in the hierarchy based on the key prop or delete it if the corresponding React element is no longer returned from the
render method.
Virtual DOM that is created from the fiber tree is the replication of painted DOM and is immutable as opposed to mutable
fiber tree.


After the first render, React ends up with a fiber tree that reflects the state of the application that was used to
render the UI. This tree is often referred to as current. When React starts working on updates it builds a so-called
workInProgress tree that reflects the future state to be flushed to the screen.

All work is performed on fibers from the workInProgress tree. As React goes through the current tree, for each existing
fiber node it creates an alternate node that constitutes the workInProgress tree. This node is created using the data
from React elements returned by the render method. Once the updates are processed and all related work is completed,
React will have an alternate tree ready to be flushed to the screen. Once this workInProgress tree is rendered on the
screen, it becomes the current tree.

One of React’s core principles is consistency. React always updates the DOM in one go — it doesn’t show partial results.
The workInProgress tree serves as a “draft” that’s not visible to the user, so that React can process all components
first, and then flush their changes to the screen.

In the sources you’ll see a lot of functions that take fiber nodes from both the current and workInProgress trees.
Here’s the signature of one such function:
    function updateHostComponent(current, workInProgress, renderExpirationTime) {...}
Each fiber node holds a reference to its counterpart from the other tree in the alternate field. A node from the current
tree points to the node from the workInProgress tree and vice versa.


You can see how most state and props updates will lead to side-effects. And since applying effects is a type of work,
a fiber node is a convenient mechanism to track effects in addition to updates. Each fiber node can have effects
associated with it. They are encoded in the effectTag field.
The effects describe the work that needs to be done during the following commit phase.During this phase React takes a
fiber tree marked with effects and applies them to instances. It goes over the list of effects and performs DOM updates
and other changes visible to a user.

So effects in Fiber basically define the work that needs to be done for instances after updates have been processed.
For host components (DOM elements) the work consists of adding, updating or removing elements. For class components
React may need to update refs and call the componentDidMount and componentDidUpdate lifecycle methods. There are also
other effects corresponding to other types of fibers.


Effects list
React processes updates very quickly and to achieve that level of performance it employs a few interesting techniques.
One of them is building a linear list of fiber nodes with effects for quick iteration. Iterating the linear list is
much faster than a tree, and there’s no need to spend time on nodes without side-effects.

The goal of this list is to mark nodes that have DOM updates or other effects associated with them. This list is a subset
of the finishedWork tree and is linked using the nextEffect property instead of the child property used in the 
current and workInProgress trees.


///////////////////////////////////////
Fiber’s architecture has two major phases: reconciliation/render and commit.

Reconciliation:
In the React source code the reconciliation phase is mostly referred to as the “render phase”. This is the phase
when React walks the tree of components and:
    updates state and props,
    calls lifecycle hooks,
    retrieves the children from the component,
    compares them to the previous children,
    and figures out the DOM updates that need to be performed

All these activities are referred to as work inside Fiber.

list of lifecycles called when working through the first render phase:
(these methods execute in the async render phase, they should not contain side effects and touch the DOM)
    [UNSAFE_]componentWillMount (deprecated)
    [UNSAFE_]componentWillReceiveProps (deprecated)
    getDerivedStateFromProps
    shouldComponentUpdate
    [UNSAFE_]componentWillUpdate (deprecated)
    render

The reconciliation algorithm always starts from the topmost HostRoot fiber node using the renderRoot function.
However, React bails out of (skips) already processed fiber nodes until it finds the node with unfinished work.
For example, if you call setState deep in the components tree, React will start from the top but quickly skip 
over the parents until it gets to the component that had its setState method called.



The problem in React 15:
if React is going to walk the entire tree of components synchronously and perform work for each component, it
may run over 16 ms available for an application code to execute its logic. And this will cause frames to drop
causing stuttering visual effects.
If you rely only on the [built-in] call stack, it will keep doing work until the stack is empty.
Wouldn’t it be great if we could interrupt the call stack at will and manipulate stack frames manually?
A recursive approach is intuitive and well-suited for walking the trees. But as we discovered, it has limitations.
The biggest one is that we can’t break the work into incremental units. We can’t pause the work at a particular
component and resume it later. With this approach React just keeps iterating until it processed all components and
the stack is empty.


Solution in React 16:
The new API React uses is requestIdleCallback global function that can be used to queue a function to be called
during a browser’s idle periods. Here’s how you would use it by itself:
    requestIdleCallback((deadline) => {
        while((deadline.timeRemaining() > 0 || deadline.didTimeout) && nextComponent){
            nextComponent = performUnitOfWork(nextComponent);
        }
    })
requestIdleCallback is actually a bit too restrictive and is not executed often enough to implement smooth UI
rendering, so React team had to implement their own version.
We perform the work on one component and then return the reference to the next component to process. This would work,
if not for one thing. You can’t process the entire tree of components synchronously, as in the previous
implementation of the reconciliation algorithm.

So to solve this problem, React had to re-implement the algorithm for walking the tree from the synchronous recursive
model that relied on the built-in stack to an asynchronous model with linked list and pointers.
It uses a linked list tree traversal algorithm. It makes it possible to pause the traversal and stop the stack from growing.
we can stop the traversal at any time and resume to it later. That’s exactly the condition we wanted to achieve to be
able to use the new requestIdleCallback API.

It’s important to understand that the work during the first render phase can be performed asynchronously.
React can process one or more fiber nodes depending on the available time, then stop to stash the work done and
yield to some event. It then continues from where it left off. Sometimes though, it may need to discard the work
done and start from the top again. These pauses are made possible by the fact that the work performed during this
phase doesn’t lead to any user-visible changes, like DOM updates. In contrast, the following commit phase is always
synchronous. This is because the work performed during this stage leads to changes visible to the user,
e.g.DOM updates. That’s why React needs to do them in a single pass.

To make the reconciliation process asynchronous and interruptable, we had to break the complete process into small chunks
and also know when to pause processing and when to resume again.



COMMIT PHASE:

This is where React updates the DOM and calls pre and post mutation lifecycle methods.

When React gets to this phase, it has 2 trees and the effects list. The first tree represents the state currently
rendered on the screen. Then there’s an alternate tree built during the render phase. It’s called finishedWork or
workInProgress in the sources and represents the state that needs to be reflected on the screen. This alternate
tree is linked similarly to the current tree through the child and sibling pointers.

And then, there’s an effects list — a subset of nodes from the finishedWork tree linked through the nextEffect
pointer. Remember that the effect list is the result of running the render phase. The whole point of rendering was
to determine which nodes need to be inserted, updated, or deleted, and which components need to have their lifecycle
methods called. And that’s what the effect list tells us. And it’s exactly the set of nodes that’s iterated during
the commit phase.

list of lifecycle methods executed during the second commit phase:
(these methods execute in the synchronous commit phase, they may contain side effects and touch the DOM)
    getSnapshotBeforeUpdate
    componentDidMount
    componentDidUpdate
    componentWillUnmount

The main function that runs during the commit phase is commitRoot. Basically, it does the following:
    Calls the getSnapshotBeforeUpdate lifecycle method on nodes tagged with the Snapshot effect
    Calls the componentWillUnmount lifecycle method on nodes tagged with the Deletion effect
    Performs all the DOM insertions, updates and deletions
    Sets the finishedWork tree as current
    Calls componentDidMount lifecycle method on nodes tagged with the Placement effect
    Calls componentDidUpdate lifecycle method on nodes tagged with the Update effect
    
After calling the pre-mutation method getSnapshotBeforeUpdate, React commits all the side-effects within a tree.
It does it in two passes. The first pass performs all DOM (host) insertions, updates, deletions and ref unmounts.
Then React assigns the finishedWork tree to the FiberRoot marking the workInProgress tree as the current tree.
This is done after the first pass of the commit phase, so that the previous tree is still current during
componentWillUnmount, but before the second pass, so that the finished work is current during componentDidMount/Update.
In the second pass React calls all other lifecycle methods and ref callbacks. These methods are executed as a separate
pass so that all placements, updates, and deletions in the entire tree have already been invoked.

Here’s the gist of the function that runs the steps described above:
    function commitRoot(root, finishedWork) {
        commitBeforeMutationLifecycles()
        commitAllHostEffects();
        root.current = finishedWork;
        commitAllLifeCycles();
    }

Each of those sub-functions implements a loop that iterates over the list of effects and checks the type of effects.
When it finds the effect pertaining to the function’s purpose, it applies it.



//////////////////////////////////////////////////////////
Linked list traversal.

3 fields/pointers in every node of linked list - child(first child), sibling(first sibling), return(parent) 

In the context of the new reconciliation algorithm in React, the data structure with these fields is called Fiber.
Under the hood it’s the representation of a React Element that keeps a queue of work to do.

It’s a parent first, depth-first implementation.
The idea is that we keep the reference to the current node and re-assign it while descending the tree until we hit
the end of the branch. Then we use the return pointer to return to the common parent.

eg:
    a1.render: () => [b1, b2, b3];
    b1.render: () => null;
    b2.render: () => [c1];
    b3.render: () => [c2];
    c1.render: () => [d1, d2];
    c2.render: () => null;
    d1.render: () => null;
    d2.render: () => null;

    will be traversed in manner - a1, b1, b2, c1, d1, d2, b3, c2,

    Code to walk through the linked list:

    function walk(o) {
        let root = o;
        let current = o;

        while(true) {
            let child = doWork(current);
            if(child) {
                current = child;
                continue;
            }
            if(current === root) {
                return;
            }

            while(!current.sibling) {
                if(!current.return || current.return === root) {
                    return;
                }
                current = current.return;
            }
            current = current.sibling;
        }
    }


//////////////////////////////////////////////////////////////

Work loop in React

    function workLoop(isYield) {
        if(!isYield) {
            //Flush work without yielding
            while(nextUnitOfWork !== null) {
                nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
            }
        } else {
            //Flush asynchronous work until the deadline runs out of time
            while(nextUnitOfWork !== null && !shouldYield()) {
                nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
            }
        }
    }

The algorithm can walk the components tree synchronously and perform the work for each fiber node in the tree
(nextUnitOfWork). This is usually the case for so-called interactive updates caused by UI events (click, input etc).
Or it can walk the components tree asynchronously checking if there’s time left after performing work for a Fiber node.
The function shouldYield returns the result based on deadlineDidExpire and deadline variables that are constantly
updated as React performs work for a fiber node.

shouldYield function has one responsibility — to decide whether to stop or continue working on tasks (performUnitOfWork).
It returns true when we should stop computation and yield to the main thread, or false when we should proceed with our
computation.
    shouldYield = function () {
        return getCurrentTime() >= deadline;
    }
It checks whether we exceeded the deadline. What is the deadline? It is a currentTime + 5m, so it appears,
React scheduler breaks the execution each 5 ms

    let yieldInterval = 5;
    const performWorkUntilDeadline = () => {
        if(scheduledHostCallback !== null) {
            const currentTime = getCurrentTime();
            deadline = currentTime + yieldInterval;
            const hasTimeRemaing = true;
            try {
                const hasMoreWork = scheduledHostCallback(hasTimeRemaing, currentTime);
                if(!hasMoreWork) {
                    isMessageLoopRunning = false;
                    scheduledHostCallback = null;
                } else {
                    port.postMessage(null);
                }
            } catch(e) {
                port.postMessage(null);
                throw e;
            }
        } else {
            isMessageLoopRunning = false;
        }
        needsPaint = false;
    }

    const channel = new MessageChannel();
    const port = channel.port2;
    channel.port1.onmessage = performWorkUntilDeadline;

port.postMessage(null); keeps the message loop running.
What is scheduledHostCallback? Long story short, it eventually triggers workLoopConcurrent presented earlier,
which is the main work loop for the React render process. But the function is designed to return information,
whether work is done or we should continue in the next message loop iteration (hasMoreWork).

There are 4 main functions that are used to traverse the tree and initiate or complete the work:
    performUnitOfWork
    beginWork
    completeUnitOfWork
    completeWork


    function performUnitOfWork(workInProgress) {
        let next = beginWork(workInProgress);
        if (next === null) {
            next = completeUnitOfWork(workInProgress);
        }
        return next;
    }

    function beginWork(workInProgress) {
        console.log('work performed for ' + workInProgress.name);
        return workInProgress.child;
    }
The function performUnitOfWork receives a fiber node from the workInProgress tree and starts the work by
calling beginWork function. This is the function that will start all the activities that need to be performed for a fiber.
For the purposes of this demonstration, we simply log the name of the fiber to denote that the work has been done.
The function beginWork always returns a pointer to the next child to process in the loop or null.

If there’s a next child, it will be assigned to the variable nextUnitOfWork in the workLoop function. However,
if there’s no child, React knows that it reached the end of the branch and so it can complete the current node.
Once the node is completed, it’ll need to perform work for siblings and backtrack to the parent after that.
This is done in the completeUnitOfWork function:

    function completeUnitOfWork(workInProgress) {
        while (true) {
            let returnFiber = workInProgress.return;
            let siblingFiber = workInProgress.sibling;

            nextUnitOfWork = completeWork(workInProgress);

            if (siblingFiber !== null) {
                // If there is a sibling, return it
                // to perform work for this sibling
                return siblingFiber;
            } else if (returnFiber !== null) {
                // If there's no more work in this returnFiber,
                // continue the loop to complete the parent.
                workInProgress = returnFiber;
                continue;
            } else {
                // We've reached the root.
                return null;
            }
        }
    }

    function completeWork(workInProgress) {
        console.log('work completed for ' + workInProgress.name);
        return null;
    }

You can see that the gist of the function is a big while loop. React gets into this function when a workInProgress node
has no children. After completing the work for the current fiber, it checks if there’s a sibling. If found, React exits
the function and returns the pointer to the sibling. It will be assigned to the nextUnitOfWork variable and React will
perform the work for the branch starting with this sibling. It’s important to understand that at this point React has
only completed work for the preceding siblings. It hasn’t completed work for the parent node. Only once all branches
starting with child nodes are completed does it complete the work for the parent node and backtracks.

As you can see from the implementation, both and completeUnitOfWork are used mostly for iteration purposes,
whereas the main activities take place in the beginWork and completeWork functions.

///////////////////////////////////////////////////////////////////

You can see that the module exports function runWithPriority as well as some predefined constants
(UserBlockingPriority, NormalPriority, LowPriority). It is not yet widely used in React, but the purpose of this
is to let React schedule work with different priorities. We can expect more use cases to be supported with this
API in further React releases.
What is the goal of such logic? To prioritize render of specific elements

Hook’s effects are being scheduled using React Scheduler Module.
There is an enigmatic enqueuePendingPassiveHookEffectMount function which schedules scheduleCallback tasks with NormalPriority.
Scheduler module under the hood builds a list of callbacks (and assigned to it priorities) that needs to be called
We have two categories of effects, passive (useEffect) and layout (useLayout). Imagine this component:
Which of the effects will be called first? layout effect. Why? As mentioned in docs, layout effect is being called
just after DOM mutation, but before browser render. Passive effects, on the other hand, are deferred
(using scheduler module) to be called after browser render.
To sum it up all passive effect hooks are being called asynchronously — after browser repaint. This is a different
approach comparing to the old implementation of componentDidMount or componentDidUpdate which block the browser
from repainting.
So, all the code you put inside passive effect goes through the React Scheduler.


/////////////////////////////////////////////////////////
The algorithm will not try to match subtrees of different component types. If you see yourself alternating between two
component types with very similar output, you may want to make it the same type. In practice, we haven’t found this to
be an issue.

When a component updates, the instance stays the same, so that state is maintained across renders. React updates the
props of the underlying component instance to match the new element, and calls UNSAFE_componentWillReceiveProps(),
UNSAFE_componentWillUpdate() and componentDidUpdate() on the underlying instance.

Next, the render() method is called and the diff algorithm recurses on the previous result and the new result.

When comparing two React DOM elements of the same type, React looks at the attributes of both, keeps the same
underlying DOM node, and only updates the changed attributes. For example:
    <div className="before" title="stuff" />

    <div className="after" title="stuff" />

By comparing these two elements, React knows to only modify the className on the underlying DOM node.