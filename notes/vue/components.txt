Components are single, independent units of an interface. 
They can have their own state, markup, and style.

Vue components can be defined in four main ways.

The first is:
new Vue({                       //for non-SPA
  /* options */
})

You instantiate Vue by mounting it on a DOM element. If you have 
a <div id="app"></div> tag, you will use:
new Vue({ el: '#app' })

A component initialized with new Vue has no corresponding tag name, 
so it's usually the main container component.
//////////////////////////////////////////////////////////////////
The second is:
Vue.component('component-name', {               //for non-SPA      
  /* options */
})

Other components used in the application are initialized using Vue.component(). 
Such a component allows you to define a tag — with which you can embed the 
component multiple times in the application — and specify the output of the 
component in the template property

Vue.component('user-name', {
  props: ['name'],
  template: '<p>Hi {{ name }}</p>'
})

<div id="app">
  <user-name name="Flavio"></user-name>
</div>

In the Vue.component() call we passed user-name as the first parameter. 
This gives the component a name. You can write the name in 2 ways here. 
The first is the one we used, called kebab-case. The second is called PascalCase, 
which is like camelCase, but with the first letter capitalized:
    user-name or UserName
Vue automatically creates an alias internally from user-name to UserName, 
and vice versa, so you can use whatever you like. It's generally best to use 
UserName in the JavaScript, and user-name in the template.

The component accepts a prop, which is an attribute we use to pass data down 
to child components.

Any component created using Vue.component() is globally registered. 
You don't need to assign it to a variable or pass it around to reuse it in your templates.
///////////////////////////////////////////////////////////////////
The third is by using local components. These are components that are 
only accessible by a specific component, and not available elsewhere 
(great for encapsulation).

const Sidebar = {
  template: '<aside>Sidebar</aside>'
}

and then make it available inside another component by using the components property:
new Vue({
  el: '#app',
  components: {
    Sidebar
  }
})
//////////////////////////////////////////////////////////////////////
The fourth is in .vue files, also called Single File Components.
Used in SPA

The .vue file is pretty cool because it allows you to define:

JavaScript logic
HTML code template
CSS styling
all in just a single file. As such it got the name of Single File Component.

<template>
  <p>{{ hello }}</p>
</template>
<script>
export default {
  data() {
    return {
      hello: 'Hello World!'
    }
  }
}
</script>
<style scoped>
  p {
    color: blue;
  }
</style>

All of this is possible thanks to the use of Webpack. The Vue CLI makes this very 
easy and supported out of the box. .vuefiles cannot be used without a Webpack setup, 
and as such, they are not very suited to apps that just use Vue on a page without 
being a full-blown single-page app (SPA).

Single File Components make it absolutely easy to write CSS that won’t leak to 
other components, by using <style scoped> tags.

If you omit scoped, the CSS you define will be global. But adding the scoped tag, 
Vue automatically adds a specific class to the component, unique to your app, 
so the CSS is guaranteed to not leak out to other components.

You can use the src attribute to externalize javascript and css:
<template>
  <p>{{ hello }}</p>
</template>
<script src="./hello.js"></script>
<style src="./hello.css"></style>
////////////////////////////////////////////////////////////////////

The building blocks of a component
So far we’ve seen how a component can accept the el, props and template properties.

el is only used in root components initialized using new Vue({}), and 
    identifies the DOM element the component will mount on.
props lists all the properties that we can pass down to a child component.
template is where we can set up the component template, which will be 
    responsible for defining the output the component generates.

A component accepts other properties:
  data the component local state
  methods: the component methods
  computed: the computed properties associated with the component
  watch: the component watchers

When to use methods
  To react to some event happening in the DOM
  To call a function when something happens in your component.
  You can call a method from computed properties or watchers.

When to use computed properties
  You need to compose new data from existing data sources
  You have a variable you use in your template that’s built from one or more 
  data properties
  You want to reduce a complicated, nested property name to a more readable 
  and easy to use one (but update it when the original property changes)
  You need to reference a value from the template. In this case, creating a 
  computed property is the best thing, because it’s cached.
  You need to listen to changes of more than one data property

When to use watchers
  You want to listen when a data property changes, and perform some action
  You want to listen to a prop value change
  You only need to listen to one specific property (you can’t watch multiple 
  properties at the same time)
  You want to watch a data property until it reaches some specific value and 
  then do something