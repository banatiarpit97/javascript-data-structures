The simplest option to add CSS to a Vue.js component is to use the style tag, 
just like in HTML
<template>
  <p style="text-decoration: underline">Hi!</p>
</template>
/////////////////////////////////////////////
Dynamic classes:
<template>
  <p :style="{'text-decoration': decoration}">Hi!</p>
</template>
<script>
export default {
  data() {
    return {
      decoration: 'underline'
    }
  }
}
</script>

:style is a shorthand for v-bind:style.

You can avoid the quotes by using a special camelCase syntax that Vue.js enables, 
and rewriting it to textDecoration:
<template>
  <p :style="{textDecoration: decoration}">Hi!</p>
</template>
///////////////////////////////////////////////////////
Instead of binding an object to style, you can reference a computed property:

<template>
  <p :style="styling">Hi!</p>
</template>
<script>
export default {
  data() {
    return {
      textDecoration: 'underline',
      textWeight: 'bold'
    }
  },
  computed: {
    styling: function() {
      return {
        textDecoration: this.textDecoration,
        textWeight: this.textWeight
      }
    }
  }
}
</script>

Notice that in the computed property you need to reference the component data 
using this.[propertyName], while in the template data, properties are conveniently 
put as first-level properties.
/////////////////////////////////////////////////////////
Vue components generate plain HTML, so you can choose to add a class to each 
element, and add a corresponding CSS selector with properties that style it:

<template>
  <p class="underline">Hi!</p>
</template>
<style>
.underline { text-decoration: underline; }
</style>
/////////////////////////////////////////////////////////
You can use SCSS like this:

<style lang="scss">
    body {
        .underline { text-decoration: underline; }
    }
</style>
////////////////////////////////////////////////////////
You can assign multiple classes, either by adding two classes to 
paragraphClass in this case or by using an array:

<template>
  <p :class="[decoration, weight]">Hi!</p>
</template>
<script>
export default {
  data() {
    return {
      decoration: 'underline',
      weight: 'weight',
    }
  }
}
</script>
<style>
    .underline { text-decoration: underline; }
    .weight { font-weight: bold; }
</style>

The same can be done using an object inlined in the class binding:
<template>
  <p :class="{underline: isUnderlined, weight: isBold}">Hi!</p>
</template>
<script>
    export default {
        data() {
            return {
                isUnderlined: true,
                isBold: true
            }
        }
    }
</script>

And you can combine the two statements:
<template>
  <p :class="[decoration, {weight: isBold}]">Hi!</p>
</template>
//////////////////////////////////////////////////////////
Any CSS thatâ€™s not hard coded like in the first example is going to be processed 
by Vue, and Vue does the nice job of automatically prefixing the CSS for us. 
This allows us to write clean CSS while still targeting older browsers 
(which still means browsers that Vue supports, so IE9+).