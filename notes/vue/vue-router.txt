Vue Router is available via npm with the package named vue-router.

If you use Vue via a script tag, you can include Vue Router using
    <script src="https://unpkg.com/vue-router"></script>

If you use the Vue CLI, install it using:
    npm install vue-router

You import it after vue, and you call Vue.use(VueRouter) to install it 
inside the app:
    import Vue from 'vue'
    import VueRouter from 'vue-router'
    Vue.use(VueRouter)

After you call Vue.use() passing the router object, in any component of the 
app you have access to these objects:
    this.$router is the router object
    this.$route is the current route object
//////////////////////////////////////////////////////////////
The router object
The router object, accessed using this.$router from any component when the 
Vue Router is installed in the root Vue component, offers many nice features.

We can make the app navigate to a new route using
    this.$router.push()
    this.$router.replace()
    this.$router.go()

which resemble the pushState, replaceState and go methods of the History API.

push() is used to go to a new route, adding a new item to the browser history
replace() is the same, except it does not push a new state to the history
go() goes back and forth, accepting a number that can be positive or negative 
to go back in the history:

this.$router.push('about') //named route, see later
this.$router.push({ path: 'about' })
this.$router.push({ path: 'post', query: { post_slug: 'hello-world' } }) 
        //using query parameters (post?post_slug=hello-world)
this.$router.replace({ path: 'about' })

this.$router.go(-1) //go back 1 step
this.$router.go(1) //go forward 1 step
////////////////////////////////////////////////////////////////
<template>
  <div id="app">
    <nav>
      <router-link to="/">Home</router-link>
      <router-link to="/login">Login</router-link>
      <router-link to="/about">About</router-link>
    </nav>
    <router-view></router-view>
  </div>
</template>

A router-link component renders an a tag by default (you can change that). 
Every time the route changes, either by clicking a link or by changing the URL, 
a router-link-active class is added to the element that refers to the active route, 
allowing you to style it.

<script>
    import Vue from 'vue'
    import VueRouter from 'vue-router'
    Vue.use(Router)

    const router = new VueRouter({
        routes: [
            { path: '/', component: Home },
            { path: '/login', component: Login },
            { path: '/about', component: About }
        ]
    })
    new Vue({
        router
    }).$mount('#app')
</script>

Usually, in a Vue app, you instantiate and mount the root app using:
    new Vue({
        render: h => h(App)
    }).$mount('#app')
When using the Vue Router, you don’t pass a render property but instead, 
you use router.

this.$router.push({ path: 'about' })

With a named route we can pass parameters to the new route:
this.$router.push({ name: 'post', params: { post_slug: 'hello-world' } })
/////////////////////////////////////////////////////////////////////
Route guards
You can think of them as life cycle hooks or middleware. 
Those are functions called at specific times during the execution of the application. 
You can jump in and alter the execution of a route, redirecting or simply canceling 
the request.

You can have global guards by adding a callback to the beforeEach() and afterEach() 
property of the router.

beforeEach() is called before the navigation is confirmed
beforeResolve() is called when beforeEach() is executed and all the components 
    beforeRouterEnter and beforeRouteUpdate guards are called, but before the navigation 
    is confirmed. The final check.
afterEach() is called after the navigation is confirmed

The usage is:
    this.$router.beforeEach((to, from, next) => {
        // ...
    })
    this.$router.afterEach((to, from) => {
        // ...
    })

to and from represent the route objects that we go to and from.
beforeEach has an additional parameter next which if we call with false as the 
parameter, will block the navigation and cause it to be unconfirmed.

Like in Node middleware, if you're familiar, next() should always be called, 
otherwise execution will get stuck.

Single route components also have guards:

beforeRouteEnter(from, to, next) is called before the current route is confirmed
beforeRouteUpdate(from, to, next) is called when the route changes but the component 
    that manages it is still the same (with dynamic routing, see next)
beforeRouteLeave(from, to, next) is called when we move away from here

We mentioned navigation. To determine if the navigation to a route is confirmed, 
Vue Router performs some checks:
it calls beforeRouteLeave guard in the current component(s)
it calls the router beforeEach() guard
it calls the beforeRouteUpdate() in any component that needs to be reused, 
    if any exist
it calls the beforeEnter() guard on the route object (I didn't mention it but 
    you can look here)
it calls the beforeRouterEnter() in the component that we should enter into
it calls the router beforeResolve() guard
if all was fine, the navigation is confirmed!
it calls the router afterEach() guard

You can use the route-specific guards (beforeRouteEnter and beforeRouteUpdate in 
case of dynamic routing) as life cycle hooks, so you can start data fetching requests 
for example.
///////////////////////////////////////////////////////////////////////////
Dynamic routing
A very common need is to handle dynamic routes, like having all posts under 
/post/, each with the slug name:
/post/first
/post/hello-world

We add in a dynamic segment to handle blog posts:
    const router = new VueRouter({
        routes: [
            { path: '/', component: Home },
            { path: '/post/:post_slug', component: Post },
        ]
    })
Notice the :post_slug syntax. This means that you can use any string, and that 
will be mapped to the post_slugplaceholder.

You’re not limited to this kind of syntax. Vue relies on 'https://github.com/pillarjs/path-to-regexp'
library to parse dynamic routes, and you can go wild with Regular Expressions.

Now inside the Post route component we can reference the route using $route, 
and the post slug using $route.params.post_slug:

const Post = {
  template: '<div>Post: {{ $route.params.post_slug }}</div>'
}
We can use this parameter to load the contents from the back-end.

You can have as many dynamic segments as you want, in the same URL:
    /post/:author/:post_slug

Remember before when we talked about what happens when a user navigates to a new route?
In the case of dynamic routes, what happens is a little different.
For Vue to be more efficient, instead of destroying the current route component 
and re-instantiating it, it reuses the current instance.
When this happens, Vue calls the beforeRouteUpdate life cycle event.

There you can perform any operation you need:
    const Post = {
        template: '<div>Post: {{ $route.params.post_slug }}</div>'
        beforeRouteUpdate(to, from, next) {
            console.log(`Updating slug from ${from} to ${to}`)
            next() //make sure you always call next()
        }
    }
///////////////////////////////////////////////////////////////////
Using props
A component should not be so tightly coupled with the router, and instead, 
we can use props:

    const Post = {
        props: ['post_slug'],
        template: '<div>Post: {{ post_slug }}</div>'
    }
    const router = new VueRouter({
        routes: [
            { path: '/post/:post_slug', component: Post, props: true }
        ]
    })
Notice the props: true passed to the route object to enable this functionality.
///////////////////////////////////////////////////////////////////
Nested routes

const Author  = {
  template: '<div>Author: {{ $route.params.author}}<router-view></router-view></div>'
}

const router = new VueRouter({
  routes: [{
    path: '/post/:author',
    component: Author,
    children: [
      path: ':post_slug',
      component: Post
    ]
  }]
})