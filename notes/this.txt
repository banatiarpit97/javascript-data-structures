Every function, while executing, has a refernce to its current execution context called this.
This in javascript is very different from this in java, c++.
Binding of 'this' is dynamic and is determined on runtime.
To get the value of 'this', we need to look at call site :
    1. how the function is called   
    2. from where the function is called
    3. when the function is called

To know the value of 'this', we need to check 4 rules, and see which one satisfies
start checking from 1 to 4

1. When an object is created using 'new' keyword, then the function/class after the 
    new keyword will be bound to 'this'.

2. Explicit/hard binding - When we use functions like call, apply, bind.
    should be used in callback functions/event handlers
    Whatever arguement is passed to the call, apply... will be made the 'this' arguement
    but if the function definition itself has the hard binding, then the innermost binding
    will be considered.
    These create a new function with the updated 'this' binding

3. Implicit binding - If an object calls a function(does not matter where the function was defined)
    then 'this' will point to the object that called the function.
    Only the outermost call determins the value of 'this', does not take into account 
    of any inner implicit binding.  //check
    'this' refers to the first or immediate left binding - this.props.submit('this' refers to props)

4. Default binding - Because none of the above 3 rules apply
    this will have the default value.Default value of 'this' id global object(window, global) in non strict mode
    and undefined in strict mode(function definition should be in strict mode)

//////////////////////////////////////////////////
function foo(){
    console.log(this.bar);
}
var bar = "bar1"
var o2 = {bar:"bar2", foo:foo};
var o3 = {bar:"bar3", foo:foo};

foo();      //print bar1(this points to global acc to rule 4)
o2.foo;     //print bar2(this points to o2 acc to rule 3)
o3.foo();   //print bar3(this points to o3 acc to rule 3)
//////////////////////////////////////////////////

var o1 = {
    bar:"bar1",
    foo:function(){
        console.log(this.bar);
    }
};
var o2 = {bar:"bar2", foo:o1.foo};
var bar = "bar3";
var foo = o1.foo;
o1.foo()    //bar1
o2.foo()    //bar2(does not matter where the function was defined)
foo()       //bar3
//////////////////////////////////////////////////

function foo(){
    console.log(this.bar);
}
var bar = "bar1";
var obj = {bar:"bar2"}

foo();  //bar1
foo.call(obj);  //bar2('this' will be obj)
//////////////////////////////////////////////////

function foo(){
    console.log(this.bar);
}

var obj = {bar:"bar"};
var obj2 = {bar:"bar2"};

var orig = foo;
foo = function(){
    orig.call(obj); //hard binding(innermost binding, hence this will be final)
}

foo();  //bar
foo.call(obj2); //bar('this' is obj)
//////////////////////////////////////////////////

Whenever new keyword is put in front of any function call
then the function call becomes constructor call.
So any function can be used to create an object using the new keyword, 
it will continue its default behaviour but now will create objects too.
4 things that happen when new keyword is used :

1. new empty object is created.(this = {})
2. this empty object gets linked to other object(prototype)(proprty '__proto__' of this is bound to 
'prototype' property of the object created when function was defined)
3. this empty object is bound to the 'this' keyword
4. If the function does not return anything, then statement 
    'return this' will be inserted after the last line of the function 
//////////////////////////////////////////////////

CALL, APPLY, BIND :

function_name.call(thisArg, arguement...);  //thisArg is bound to 'this' keyword
function_name.apply(thisArg, [arguement...]);  //thisArg is bound to 'this' keyword

difference between call and apply is that call takes arguements separately whereas 
apply takes arguements as array.

difference between call/apply and bind is that call/apply executed that function with 'this' binding
but bind returns a new function with 'this' binding that we can later like a normal function

function_name.bind(thisArg, arguement...);  //thisArg is bound to 'this' keyword

we can change the context of any function by just appending the bind(thisArg) to the function call or function definition
a.bind(thisArg)     
elem.addEventListener('click', 
    function(){
        console.log('clicked')
    }.bind(thisArg);               //if we don't bind, 'this' wll refer to elem. but now it will be thisArg
)

bind can also be used to perform currying:
    function add(x, y) {
        return x + y;
    }
    var plus1 = add.bind(null, 1);
    console.log(plus1(5));  // 6

    above bind code was converted to:
        function plus1(y) {
            return add(1, y);
        }
//////////////////////////////////////////////////
Even though it appears this refers to the object where it is defined, 
it is not until an object invokes the this Function that this is actually assigned a value. 
And the value it is assigned is based exclusively on the object that invokes the this Function.

var a = 1
function b(){
    var a = 2
    console.log(this.a);    
}

b();   //prints 1 because 'this' refers to global(window) as it is not called by an object    
above statement can also be written as this.b() or window.b()
//////////////////////////////////////////////////

var user = {
    a = "hi",
    b: function () {
        console.log(this.a);
    }
}
$("button").click(user.b); // undefined because, 'this' refers to button and not user
to fix - $("button").click(user.b.bind(user))
//////////////////////////////////////////////////
VV IMP QUES

function userCreator(name, score){
    this.name = name;
    this.score = score;
}
userCreator.prototype.increment = function(){   
    //'this' refers to 'user1'
    function add(){
        this.score++;   //'this' refers to global(window) here and hence this line does not work(returns NaN)
    }
    add()
    //to correct this, either use arrow function or call/apply/bind
}
const user1 = new userCreator('arpit', 5);
user1.increment()

/////////////////////////////////////////////////////////////////////////////////
Function inside function:
    if we define a function inside another function than value of 'this' inside inner function
    my be different depending on how we call it.

    Function expressions are often used as arguments in function calls in JavaScript. 
    Always be careful when you refer to this from one of those function expressions.

