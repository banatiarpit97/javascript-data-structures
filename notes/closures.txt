closures are functions inside functions such that inner function has access to local variables
and paramters of outer functions (even after the outer function has returned)

because of closures, we can pass functions as paramters, we can have functions in setTimeout, event handlers...
so closure is a necessity in js

inner function has access to:
    its local variables
    parent function's local variable and paramters
    global variables

inner function does not have access to:
    'this' keyword of outer function
    'arguements' keyword of outer function
the above problems can be solved by making a variable of outer function and assigning this/arguements to it

outer function can not access local variables of inner function
///////////////////////////////////////////////////////////////////////////

function outer(){
    var name = "arpit";

    function inner(){
        console.log(name);  //arpit
    }

    inner();
}
outer();

inner()  //Reference error(can not call inner function from outside the outer function)

/////////////////////////////////////////////////////////////////////////////

if we want to execute the inner function from outside, we need to return it:
function outer(){
    var name = "arpit";

    return function inner(){
        console.log(name);
    }
}
var my = outer();
my();         //will execute inner and "arpit" will be printed

or :

outer()();  //as outer function returns inner function

/////////////////////////////////////////////////////////////////////////////
function outer(name){

    return function inner(){
        console.log(name);
    }
}
var a = outer("arpit);      //child function remembers the environment it was created in
var b = outer("banati);     //even after the function has returned
a();         //will execute inner and "arpit" will be printed
b();         //will execute inner and "banati" will be printed

///////////////////////////////////////////////////////////////////////////
inner function can also take arguements
function outer(first){

    return function inner(second){
        console.log(first+second);
    }
}
var a = outer("arpit);      
a("banati);         //Logs arpitbanati

///////////////////////////////////////////////////////////////////////////
Actual use of closures - FUNCTION FACTORIES
i.e. to create function from functions.

function defineConversion(multiplier){
    return function(input){
        return input*multiplier;
    }
}
var KgToPounds = defineConversion(2.204);
KgToPounds(22);     //can call any number of types with other arguements

var FeetToMeters = defineConversion(0.304);
FeetToMeters(44);    //can call any number of types with other arguements

hence we are creating different conversion functions from outer functions.
we don't need to write function for every conversion.

////////////////////////////////////////////////////////////////////////////
We can nest as many levels as we want

function outer(name="name"){
    var first = 1;
    return function inner(){
        var second = 2;
        return function another(){
            console.log(name, first, second);   //name,1,2   
            //inner function has access to all the functions it is nested in
        }
    }
}

///////////////////////////////////////////////////////////////////////////
We can also nest IIFE

var multiply = (function(a){
    return (function(b){
        return (function(c){
            return a*b*c;
        })(3)
    })(5)
})(2)

multiply()   //logs 30

////////////////////////////////////////////////////////////////////////////
closures can also be defined as when a function remembers its lexical scope even when 
the function is executed outside that lexical scope.
scope of outer function is retained until there is atleast one inner function that needs to access it,
after that variables of outer scope can be garbage collected.

function foo(){
    var bar = "bar";
    function baz(){
        console.log(bar);
    }
    bam(baz);
}
function bam(baz){
    baz();      //prints bar
}
foo();
////////////////////////////////////////////////////////////////////////////
all the inner functions have same scope i.e. of the outer function.
for(var i=1;i<=5;i++){
    setTimeout(function(){
        console.log(i);
    }, i*1000)
}
// we would expect this to print 1 after 1 sec, 2 after 2 sec...but it prints 6 every time.
//this is because, this behaves as 5 setTimeouts one after the other and every setTimeout has same scope.
//Because inner function(closures) has access to the updated value of outer variable.The value that closure gets
depends upon when it was called.
Since the inner function i.e. setTimeout will be called after the for loop is executed completely
the value of 'i' inside setTimeout will be what 'i' is after the for loop.
//to behave as we want, we use IIFE as it creates its own scope.
for(var i=1;i<=5;i++){
    (function(i){
        setTimeout(function(){
            console.log(i);
        }, i*1000)
    })(i);
}
//or we can use let instead of var because let has a special feature when used inside for loop parenthesis
//let keyword declares that variable for every iteration of loop
for(let i=1;i<=5;i++){
    setTimeout(function(){
        console.log(i);
    }, i*1000)
}
////////////////////////////////////////////////////////////////////////////
MODULE PATTERN USING closures and iife i.e. creating modules, creating private, public memebers(abstraction):
Characterstics of module pattern :
1. there must be an outer enclosing function(iife)
2. outer function must return atleast one inner function.

var foo = (function(){
    var o = {bar:"bar"};    //private property

    return function(){      //public function(public API) that can access private property
        console.log(o.bar);
    }
})
foo();  //prints bar

//to return more than 1 inner function create an object that contains those functions and return the object.
//everything inside an iife is private unless returned
var foo = (function(){
    var o = {bar:"bar"};    //private property
    var k = {bar:"bar1"};    //private property

    return{
        baz:function(){      //public function(public API) that can access private property
                console.log(o.bar);
            }
        baz1:function(){
            console.log(k.bar)
        }
    } 
})
foo.baz();  //prints bar
foo.baz1();  //prints bar1

ES6 makes it easy for creating the module pattern as now we don't need the outer function.The file works as outer function
Our code in the file is automatically wrapped in an IIFE(can be seen in debugging mode)
    var o = {bar:"bar"};    //private property
    export function bar(){
        return o.bar;
    }
//we can have as many export statements as needed, and all of them will be exported.
//they can be imported in other file like:
    import {bar} from file_name;

////////////////////////////////////////////////////////////////////////////

When we pass a callback function as an argument to another function, the callback is executed
at some point inside the containing function’s body just as if the callback were defined in the

/////////////////////////////////////////////////////////////////////////
since the callback has access to the latest value of variables, setTimeout when executed will have access
to the value of variables at the time when setTimeout will execute
var a = 1;
setTimeout(() => {console.log(a)}, 1000);	//prints 3
a = 3;
containing function. This means the callback is a closure.As we know, closures have access 
to the containing function’s scope, so the callback function can access the containing functions’
variables, and even the variables from the global scope.
