Creating objects : 

var a = { }  or 

var a =  new Object(); then a.prop = value;

var a = Object.create(null)     //creates a completely empty object(no .proto)
Such an object is a better map (dictionary) than a normal object, which is why this
pattern is sometimes called the dict pattern (dict for dictionary).
////////////////////////////////////////////////////////////////////////////

Objects can also contain functions :

var a = {
    prop: "string",
    name : function(){
        return this.prop;
    }
    age : function(n){
        return n;
    }
}
a.name();       //parenthesis to call the function
a.age(21);

if we use arrow functions inside objects, then 'this' keyword would not work as expected.
var a = {
    prop: "string",
    name : () => {
        return this.prop;       //return undefined(as 'this' is global)
    }
}

we can also use named functions(without key and function keyword)
var a = {
    prop: "string",
    name(){
        return this.prop;
    }
}
////////////////////////////////////////////////////////////////////////////

We can add properties/functions to objects dynamically:
a.new1 = "hello"
a.new2 = function(){return a};

////////////////////////////////////////////////////////////////////////////

Accessing properties :

a.name or 
a["name"]   

Second one has an advantage that we can use dynamic variables that hold property names:
var w = "name";
a[w] -> will calculate a["name"];

Note that the bracket operator coerces its interior to string.
    obj[3+3]    //will calculate obj['6']

Calling methods works as you would expect:
    obj['myMethod']()

////////////////////////////////////////////////////////////////////////////

Objects are passed by refernce :
var a = {name: "arpit"};
var b = a;
b.name = "yoyo";
a.name -> will give "yoyo"

to create copy of objects and not aliases :
var b = Object.create(a);
or b = {...a}

////////////////////////////////////////////////////////////////////////////
Object destructuring in ES6
to create new variables from properties of existing objects

var user = {
    name:"arpit",
    age:21
}

var {name} = user;
console.log(name)   //prints arpit

in function's parameters :
    function a({name}){
        console.log(name)   //'arpit'
    }
    a(user);

We can also destructure arrays :(idea behind swapping vars)
    var arr = [1,2];
    var [n, m] = arr;
    console.log(n, m)   //1 2

destructure an array and assign an element to a previously declared variable:
    let vowel;
    [vowel] = ["a", "e", "i", "o", "u"];
    console.log(vowel); // a

destructure an object and assign a property to a previously declared variable:
    let name;
    { name } = { name: "Alice" };   //gives an error

    The problem was that the braces surrounding the name variable were parsed as 
    a block. To be parsed as destructuring property assignment, the assignment 
    expression needs to be surrounded by parentheses, like this:
        let name;
        ({ name } = { name: "Alice" });
        console.log(name); // Alice
////////////////////////////////////////////////////////////////////////////

in ES6, if name and value of property of object is same, we can emit colon and property

var text = "hello"

var obj = {text:text}
is same as
var obj = {text}
////////////////////////////////////////////////////////////////////////////

Property names can be a string or a number, but if the property name is a number,
it has to be accessed with the bracket notation.

var ageGroup = {30: "Children", 100:"Very Old"};
console.log(ageGroup.30) // This will throw an error
console.log(ageGroup["30"]); // Children
////////////////////////////////////////////////////////////////////////////
only objects and arrays are passed as refernce, number, string, booleans are passed by value
////////////////////////////////////////////////////////////////////////////

Each data property (object property that store data) has not only the name-value pair,
but also 3 attributes (the three attributes are set to true by default):
— Configurable Attribute: Specifies whether the property can be deleted or changed.
— Enumerable: Specifies whether the property can be returned in a for/in loop.
— Writable: Specifies whether the property can be changed.
////////////////////////////////////////////////////////////////////////////

While you can use some reserved word such as “for” as property names in your objects,
it is wise to avoid this altogether.
////////////////////////////////////////////////////////////////////////////

console.log(prop in object)     //return true if prop exist in object or is inherited from any of prototype
console.log(object.hasOwnProperty('prop'))  //return true only if prop exists on object itself     
                            //will return false if inherited

////////////////////////////////////////////////////////////////////////////
for-in loop iterates over all enumerable properties(own and inherited)
but properties inherited from Object.prototype are not Enumerable
////////////////////////////////////////////////////////////////////////////
To delete a property from an object, you use the delete operator. 
Only properties that are defined in object itself and that defined in constructor function using this
keyword can be deleted.(Props in constructor function are not inherited, they are created every time
we create an object but props defined in proto are inherited)

You cannot delete properties that were inherited(Defined in proto), nor can you delete properties with their
attributes set to configurable. You must delete the inherited properties on the prototype object 
(where the properties were defined). Also, you cannot delete properties of the global object, 
which were declared with the var keyword.

we can also set/change properties that are inherited.
To delete/set, we first have to find the object that contains it

delete obj.prop;        //always returns true(whether prop deleted or not)

If you merely set a property to undefined, the property still exists and the object still 
contains its key:   Object.keys(obj)

Use the delete operator sparingly. Most modern JavaScript engines optimize the performance of
instances created by constructors if their “shape” doesn’t change (roughly: no properties are
removed or added). Deleting a property prevents that optimization.

delete returns false if the property is an own property, but cannot be deleted. It returns
true in all other cases.
////////////////////////////////////////////////////////////////////////////
Borrowing methods from objects:

    var first = {
        scores  :[20, 34, 55, 46, 77],
        avgScore:null,
    }

    var second = {
        scores  :[900, 845, 809, 950],
        avgScore:null,
        avg :function () {
            var sum;
            this.scores.forEach((elem) => {
                sum +=elem;
            });
            this.avgScore = sum/this.scores.length;
        }
    }
    first.avgScore = second.avg();
    //if we borrow method like above, 'this' will refer to 'second'
    because we are calling the function with second
    to correct -> first.avgScore = second.avg().bind(first);

    We can also do this by:
        first.avg = second.avg;
    and then do:
        first.avg()

If you extract a method from an object, it becomes a true function again. Its connection
with the object is severed. Same happens when we pass these functions as callback

//////////////////////////////////////////////////////////////////////////////////////
key in objects can or can not be in qoutes
but if key contains '-', then it needs to be in quotes.
//////////////////////////////////////////////////////////////////////////////////////
EVERY OBJECT IN JS HAVE A PROPERTY CALLED '__proto__' THAT POINTS TO UPPER prototype
WHETER IT IS A NORMAL OBJECT OR PART OF FUNCTION+OBJECT COMBO, EVERY OBJECT WILL HAVE THIS PROP
////////////////////////////////////////////////////////////////////////////////////
while destructuring objects, if we want to add a prop with dynamic name, wraap it in square brackets

    sounds = {dog: 'bark'}
    animal = 'cat';
    sound = 'meow';

    newSounds = { ...sounds, [animal]:sound }

while destructuring objects, if we want to rename a property ob the object, we use :
    sounds = {dog: 'bark'}
    const {dog:animal} = sounds;
    dog //undefined
    animal  //bark
////////////////////////////////////////////////////////////////////////////////////////

Extracting methods from objects:
If you extract a method, it loses its connection with the object. On its own, the function 
is not a method anymore, and this has the value undefined (in strict mode).

    var jane = {
        name: 'Jane',
        describe: function () {
            return 'Person named '+this.name;
        }
    };
We want to extract the method describe from jane, put it into a variable func, 
and call it. However, that doesn’t work:
    > var func = jane.describe;
    > func()
    TypeError: Cannot read property 'name' of undefined

The solution is to use the method bind() that all functions have. It creates a new function 
whose this always has the given value:
    > var func2 = jane.describe.bind(jane);
    > func2()
    'Person named Jane'
////////////////////////////////////////////////////////////////////////////////////////
Deep copy an object:
    If you do not use Dates, functions, undefined, Infinity, RegExps, Maps, Sets, Blobs, 
    FileLists, ImageDatas, sparse Arrays, Typed Arrays or other complex types within your object, 
    a very simple one liner to deep clone an object is:
        JSON.parse(JSON.stringify(object))

Shallow Copy of an object:
    {...obj}
    Object.assign({}, obj);

////////////////////////////////////
Object.is() can also be used instead of ===, actually its better than === becuase it
covers some cases like NaN and -0

////////////////////////////////////
Map vs Object:
    1. order of properties are conserved in Map
    2. Map can not have inheritance(prototype linking)
    3. The keys of an Object are Strings and Symbols, whereas they can be any value
        for a Map, including functions, objects, and any primitive.
    4. A Map is an iterable and can thus be directly iterated, whereas iterating over
        an Object requires obtaining its keys in some fashion and iterating over them.

/////////////////////////////////////////////////
    var obj = {};
    Object(obj) === obj     //true

The following function checks whether value is an object:
    function isObject(value) {
        return value === Object(value);
    }

////////////////////////////////////////////////
There are many internal properties in js.
All of these properties are defined by [[name]] like [[Prototype]], [[Scope]]
we can not refernce them directly but usually there is key to refernce them like
__proto__, outer etc

////////////////////////////////////////////////
Object.create(proto, propDescObj?)

Optionally, properties can be added via descriptors (which are explained in Property Descriptors).
    var jane = Object.create(PersonProto, {
        name: { value: 'Jane', writable: true }
    });

////////////////////////////////////////////////////
for (propKey in obj) 
    returns all enumerable keys of obj and enumerable keys on all of its prototypes

Object.getOwnPropertyNames(obj) returns the keys of all own properties of obj.

Object.keys(obj) returns the keys of all enumerable own properties of obj.

////////////////////////////////////////////////////
Accessors (Getters and Setters)

property is virtual and not storage space
    var obj = {
        get foo() {
            return 'getter';
        },
        set foo(value) {
            console.log('setter: '+value);
        }
    };

    > obj.foo = 'bla';
    setter: bla
    > obj.foo
    'getter'

    a normal assignment in the object can override setters and getters if that comes after,
    but if getter/setter comes after, they will override the assignment
        var obj = {
            get foo() {
                return 'getter';
            },
            set foo(value) {
                console.log('setter: '+value);
            },
            foo: 1      //getter, setter won't be called now since overriden
        };

Getters and setters are inherited from prototypes.

////////////////////////////////////////////////////
Property attributes:
    All of a property’s state, both its data and its metadata, is stored in attributes.
    They are fields that a property has, much like an object has properties. Attribute
    keys are often written in double brackets.

    [[Value]] 
        holds the property’s value, its data.

    [[Writable]]
        whether the value of a property can be changed.

    [[Get]]
        holds the getter, a function that is called when a property is read.
        The function computes the result of the read access.

    [[Set]]
        holds the setter, a function that is called when a property is set to a value.
        The function receives that value as a parameter.

    All properties have the following attributes:

        [[Enumerable]]
            Making a property nonenumerable hides it from some operations.
            The main purpose of enumerability is to tell the for-in loop which properties it
            should ignore.
            Instances of built-in constructors, everything not created by the user is hidden
            from for-in.

            The only operations affected by enumerability are:
            for-in loop, Object.keys(), JSON.stringify()

        [[Configurable]]
            If it is false, you cannot delete a property, change any of its attributes
            (except [[Value]]), or convert it from a data property to an accessor property or
            vice versa. In other words, [[Configurable]] controls the writability of a
            property’s metadata. There is one exception to this rule—JavaScript allows you
            to change an unconfigurable property from writable to read-only, for historic
            reasons; the property length of arrays has always been writable and unconfigurable.
            Without this exception, you wouldn’t be able to freeze arrays.

/////////////////////////////////////////////////////////////////
Property Descriptors
    A property descriptor is a data structure for working programmatically with attributes.
    It is an object that encodes the attributes of a property. Each of a descriptor’s
    properties corresponds to an attribute.

    Defining properties via descriptors:
        If a property does not exist, create a new property whose attributes are as
        specified by the descriptor. If an attribute has no corresponding property in the
        descriptor, then use the default value.
        If a property already exists, update the attributes of the property as specified by
        the descriptor. If an attribute has no corresponding property in the descriptor,
        then don’t change it.

    Methods:
        Object.getOwnPropertyDescriptor(obj, propKey)
            Returns the descriptor of the own (noninherited) property of obj whose key is
            propKey. If there is no such property, undefined is returned

        Object.defineProperty(obj, propKey, propDesc)
            Create or change a property of obj whose key is propKey and whose attributes
            are specified via propDesc. Return the modified object.
                var obj = Object.defineProperty({}, 'foo', {
                    value: 123,
                    enumerable: true
                });

        Object.defineProperties(obj, propDescObj)
            The batch version of Object.defineProperty(). Each property of propDescObj holds
            a property descriptor. The keys of the properties and their values tell
            Object.defineProperties what properties to create or change on obj
                var obj = Object.defineProperties({}, {
                    foo: { value: 123, enumerable: true },
                    bar: { value: 'abc', enumerable: true }
                });

    Default values of attributes while defining properties
        [[Value]] - undefined
        [[Get]] - undefined
        [[Set]] - undefined
        [[Writable]] - false for descriptor({}), true for assignment(=)
        [[Enumerable]] - false for descriptor({}), true for assignment(=)
        [[Configurable]] - false for descriptor({}), true for assignment(=)

////////////////////////////////////////////////////
Copying an Object:
    To create an identical copy of an object, you need to get two things right:
        1. The copy must have the same prototype
        2. The copy must have the same properties, with the same attributes as the original.

        function copyObject(orig) {
            var copy = Object.create(Object.getPrototypeOf(orig));
            copyOwnPropertiesFrom(copy, orig);
            return copy;
        }
        function copyOwnPropertiesFrom(target, source) {
            Object.getOwnPropertyNames(source)
            .forEach(function(propKey) {
                var desc = Object.getOwnPropertyDescriptor(source, propKey);
                Object.defineProperty(target, propKey, desc);
            });
            return target;
        };

////////////////////////////////////////////////////
Inherited Read-Only Properties Can’t Be Assigned To
    If an object, obj, inherits a property, foo, from a prototype and foo is not writable,
    then you can’t assign to obj.foo but defining that property works
    does not do anything in sloppy mode, TypeError in strict mode.

    var proto = Object.defineProperty({}, 'foo', {
        value: 'a',
        writable: false
    });
    var obj = Object.create(proto);

    > obj.foo = 'b';
    > obj.foo
    'a'

    > Object.defineProperty(obj, 'foo', { value: 'b' });
    > obj.foo
    'b'

////////////////////////////////////////////////////
Protecting Objects:

Preventing Extensions(Weakest):
    makes it impossible to add properties to obj.
    You can still delete properties, though
    nothing happens in sloppy mode, TypeError in strict mode
        Object.preventExtensions(obj);
        Object.isExtensible(obj)

Sealing(Mid):
    prevents extensions and makes all properties unconfigurable.
    literally change configurable attribute of all properties to false, can be verified using
    getOwnPropertyDescriptor()
    This means that the attributes of properties can’t be changed anymore,
    You can still change the property like obj.foo = 'b'

        Object.seal(obj)
        Object.isSealed(obj)

Freeze(Strongest):
    It makes all properties nonwritable and seals obj. In other words, obj is not extensible
    and all properties are read-only, and there is no way to change that.
    nothing happens in sloppy mode, TypeError in strict mode

        Object.freeze(point);
        Object.isFrozen(obj)

Pitfall: Protection Is Shallow
    Protecting an object is shallow: it affects the own properties, but not the values of
    those properties.

        var obj = {
            foo: 1,
            bar: ['a', 'b']
        };
        Object.freeze(obj);

    Even though you have frozen obj, it is not completely immutable—you can change the
    (mutable) value of property bar:

        > obj.foo = 2; // no effect
        > obj.bar.push('c'); // changes obj.bar

        > obj
        { foo: 1, bar: [ 'a', 'b', 'c' ] }

    Additionally, obj has the prototype Object.prototype, which is also mutable.

/////////////////////////////////////////////////////////////////
Conversion to Primitive

Object.prototype.toString()
This is the preferred way of converting an object to a string.
Returns a string representation of an object:
    > ({ first: 'John', last: 'Doe' }.toString())
    '[object Object]'
    > [ 'a', 'b', 'c' ].toString()
    'a,b,c'
    > String({ toString: function () { return 'ME' } })
    'Result: ME'

Object.prototype.valueOf()
This is the preferred way of converting an object to a number.
valueOf is overridden by wrapper constructors to return the wrapped primitive:
    > new Number(7).valueOf()
    7
    > 3 * { valueOf: function () { return 5 } }
    15

The conversion to boolean is not configurable;
objects are always considered to be true.

Object.prototype.toLocaleString()
This method returns a locale-specific string representation of an object.
The default implementation calls toString(). Most engines don’t go beyond this
support for this method. However, the ECMAScript Internationalization API 
which is supported by many modern engines, overrides it for several built-in
constructors.

////////////////////////////////////////////////////////////////
Proxy
Proxy object is used to define custom behaviour for fundamental operations of a
JavaScript object (remember, function and arrays are also object in JavaScript).
It is a constructor method that can be used to create a Proxy object. It accepts
a target object that is to be proxied and a handler object that will define the
necessary customisation. The handler object allows for defining some trap
functions like get, set, has, apply, etc. that are used to add custom behaviour
attached to their usage. 


//Reflect
Reflect, on the other hand, is a built-in object that provides similar methods
that are supported by the handler object of Proxy as static methods on itself.
It is not a constructor; its static methods are used for intercept-able
JavaScript operations.