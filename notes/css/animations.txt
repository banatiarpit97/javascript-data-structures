Always prefer CSS animations(keyframes) over JS animations becuase css animations happends in a
different thread.
Sometimes its not possible to use css animation like when we need to calculate value, then
use requestAnimationFrame

In most of the cases, we need ease-out timing for entering animation/transition and
ease-in timing for exiting animation/transition

We should prefer animations/transitions using transform rather than position or margin
Transform animations does not trigger reflow and repaint and most probably carried out by
compositor thread with the help of GPU. They operate on element's visual representation as if
it were an image rather than a dom element.
Opacity works in the same way as transform.

Properties(any one) such as perspective, backface-visibility, transform: translateZ(0)
will allow the browser to know that we need browser acceleration



/* The animation code */
    @keyframes example {
        from {background-color: red;}       //represents 0%
        to {background-color: yellow;}      //represents 100%
    }
    or
    @keyframes example {
        0%   {background-color:red; left:0px; top:0px;}
        25%  {background-color:yellow; left:200px; top:0px;}
        50%  {background-color:blue; left:200px; top:200px;}
        75%  {background-color:green; left:0px; top:200px;}
        100% {background-color:red; left:0px; top:0px;}
    }

/* The element to apply the animation to */
    div {
        width: 100px;
        height: 100px;
        background-color: red;
        animation-name: example;
        animation-duration: 4s;
        animation-delay: 2s;
        animation-iteration-count: 3;
        animation-direction: reverse;
        animation-timing-function: linear;
        animation-fill-mode: forwards;
    }

Animation shorthand :
    animation:  name duration timing-function delay iteration-count direction;

The animation-duration property defines how long time an animation should take to complete. 
If the animation-duration property is not specified, no animation will occur, because the 
default value is 0s (0 seconds). 

The animation-delay property specifies a delay for the start of an animation.
Negative values are also allowed. If using negative values, 
the animation will start as if it had already been playing for N seconds.

The animation-iteration-count property specifies the number of times an animation should run.

The animation-direction property specifies whether an animation should be played forwards, 
backwards or in alternate cycles.
The animation-direction property can have the following values:
    normal - The animation is played as normal (forwards). This is default
    reverse - The animation is played in reverse direction (backwards)
    alternate - The animation is played forwards first, then backwards
    alternate-reverse - The animation is played backwards first, then forwards

The animation-timing-function property specifies the speed curve of the animation.
The animation-timing-function property can have the following values:
    ease - Specifies an animation with a slow start, then fast, then end slowly (this is default)
    linear - Specifies an animation with the same speed from start to end
    ease-in - Specifies an animation with a slow start
    ease-out - Specifies an animation with a slow end
    ease-in-out - Specifies an animation with a slow start and end
    cubic-bezier(n,n,n,n) - Lets you define your own values in a cubic-bezier function

CSS animations do not affect an element before the first keyframe is played or after the 
last keyframe is played. The animation-fill-mode property can override this behavior.

The animation-fill-mode property specifies a style for the target element when the animation 
is not playing (before it starts, after it ends, or both).
The animation-fill-mode property can have the following values:
    none - Default value. Animation will not apply any styles to the element 
            before or after it is executing
    forwards - The element will retain the style values that is set by the last 
                keyframe (depends on animation-direction and animation-iteration-count)
    backwards - The element will get the style values that is set by the first keyframe 
            (depends on animation-direction), and retain this during the animation-delay period
    both - The animation will follow the rules for both forwards and backwards, extending the 
            animation properties in both directions

//////////////////////////////////////
JavaScript events for CSS Animations
Using JavaScript you can listen for the following events:
    animationstart
    animationend
    animationiteration
Be careful with animationstart, because if the animation starts on page load, 
your JavaScript code is always executed after the CSS has been processed, so the 
animation is already started and you cannot intercept the event.

