At the time of writing, April 2019, all major browsers (except IE, which will never have 
support for it) are already supporting this technology, covering 92% of all users.

CSS Grid is not a competitor to Flexbox. They interoperate and collaborate on complex 
layouts, because CSS Grid works on 2 dimensions (rows AND columns) while Flexbox works on a 
single dimension (rows OR columns).

The CSS Grid layout is activated on a container element (which can be a div or any other tag) 
by setting display: grid.

As with flexbox, you can define some properties on the container, and some properties on each 
individual item in the grid.
These properties combined will determine the final look of the grid.

The most basic container properties are grid-template-columns and grid-template-rows.
    Those properties define the number of columns and rows in the grid, and they also set the 
    width of each column/row.
        grid-template-columns: 200px 200px 200px 200px;(width in col)
        grid-template-rows: 300px 300px;(height in row)

Automatic dimensions
Many times you might have a fixed header size, a fixed footer size, and the main content 
that is flexible in height, depending on its length. In this case you can use the auto keyword:
    display: grid;
    grid-template-rows: 100px auto 100px;

Adding space between the cells
Unless specified, there is no space between the cells.
You can add spacing by using those properties:
    grid-column-gap
    grid-row-gap
    or the shorthand syntax grid-gap.

Spawning items on multiple columns and/or rows
Every cell item has the option to occupy more than just one box in the row, and expand 
horizontally or vertically to get more space, while respecting the grid proportions set 
in the container.
These are the properties weâ€™ll use for that:
    grid-column-start
    grid-column-end
    grid-row-start
    grid-row-end
    Shorthand syntax
    Those properties have a shorthand syntax provided by:
        grid-column
        grid-row

    grid-column-start: 2;
    grid-column-end: 4;
    grid-column: 2 / 4;

    Another approach is to set the starting column/row, and set how many it should occupy using span:
    grid-column: 2 / span 2;

//////////////////////////////////////////////////////////////////////////
Using fractions
Specifying the exact width of each column or row is not ideal in every case.

A fraction is a unit of space.

The following example divides a grid into 3 columns with the same width, 1/3 of the available 
space each.
    grid-template-columns: 1fr 1fr 1fr;

You can also use percentages, and mix and match fractions, pixels, rem and percentages:
    grid-template-columns: 3rem 15% 1fr 2fr

///////////////////////////////////////////
Using repeat()
repeat() is a special function that takes a number that indicates the number of times a 
row/column will be repeated, and the length of each one.

If every column has the same width, you can specify the layout using this syntax:
    grid-template-columns: repeat(4, 100px);
This creates 4 columns with the same width.

Or using fractions:
    grid-template-columns: repeat(4, 1fr);
//////////////////////////////////////////////////////
Specify a minimum width for a row
    grid-template-columns: minmax(200px, 3fr) 9fr;

You can also set just a min/maximum value using the auto keyword:
    grid-template-columns: minmax(auto, 50%) 9fr;
    grid-template-columns: minmax(100px, auto) 9fr;

//////////////////////////////////////////////////////////////////////////////
Positioning elements using grid-template-areas
By default elements are positioned in the grid using their order in the HTML structure.
Using grid-template-areas you can define template areas to move them around in the grid, 
and also to spawn an item on multiple rows / columns instead of using grid-column.
    grid-template-areas:
    "header header header header"
    "sidebar main main main"
    "footer footer footer footer";  
    
    //header, sidebar, footer are html tags with grid-area defined in CSS
        header {
            grid-area: header;
        }

Adding empty cells in template areas
You can set an empty cell using the dot . instead of an area name in grid-template-areas:
    grid-template-areas:
    ". header header ."
    "sidebar . main main"
    ". footer footer .";