Elements may be distorted, or transformed, on both a two-dimensional plane or a 
three-dimensional plane. Two-dimensional transforms work on the x and y axes, 
known as horizontal and vertical axes. Three-dimensional transforms work on both 
the x and y axes, as well as the z axis. These three-dimensional transforms help 
define not only the length and width of an element, but also the depth. Weâ€™ll start 
by discussing how to transform elements on a two-dimensional plane, and then work 
our way into three-dimensional transforms.

rotate:
The transform property accepts a handful of different values. The rotate value 
provides the ability to rotate an element from 0 to 360 degrees. Using a 
positive value will rotate an element clockwise, and using a negative value will 
rotate the element counterclockwise. The default point of rotation is the center 
of the element, 50% 50%, both horizontally and vertically. Later we will discuss 
how you can change this default point of rotation.
    transform: rotate(20deg);
    rotate(angle)
    rotateX(angle)
    rotateY(angle)
    rotateZ(angle)
    rotate3d(x,y,z,angle)

scale:
Using the scale value within the transform property allows you to change the appeared 
size of an element. The default scale value is 1, therefore any value between 
.99 and .01 makes an element appear smaller while any value greater than or equal 
to 1.01 makes an element appear larger.
    transform: scale(.5, 1.15);
    scale(x,y)
    scaleX(x)
    scaleY(y)
    scaleZ(z)
    scale3d(x,y,z)

translate:
The translate value works a bit like that of relative positioning, pushing and pulling 
an element in different directions without interrupting the normal flow of the document. 
    transform: translate(-10px, 25%);
    translate(x,y)
    translateX(x)
    translateY(y)	
    translateZ(z)
    translate3d(x,y,z)

skew:
The last transform value in the group, skew, is used to distort elements on the horizontal 
axis, vertical axis, or both. The syntax is very similar to that of the scale and translate values. 
Using the skewX value distorts an element on the horizontal axis while the skewY value distorts 
an element on the vertical axis. To distort an element on both axes the skew value is used, 
declaring the x axis value first, followed by a comma, and then the y axis value.%p
    transform: skew(5deg, -20deg);
    skew(x-angle,y-angle)
    skewX(angle)
    skewY(angle)
    no 3d skew available

Using multiple transform declarations will not work, as each declaration will overwrite 
the one above it. The behavior in that case would be the same as if you were to set the 
height of an element numerous times.
    transform: skew(10deg, 20deg) translateX(20px);

As previously mentioned, the default transform origin is the dead center of an element, 
both 50% horizontally and 50% vertically. To change this default origin position the 
transform-origin property may be used.

The transform-origin property can accept one or two values. When only one value is specified, 
that value is used for both the horizontal and vertical axes. If two values are specified, 
the first is used for the horizontal axis and the second is used for the vertical axis.

PERSPECTIVE:
In order for three-dimensional transforms to work the elements need a perspective from which 
to transform. The perspective for each element can be thought of as a vanishing point, 
similar to that which can be seen in three-dimensional drawings.

The perspective of an element can be set in two different ways. One way includes using 
the perspective value within the transform property on individual elements, while the 
other includes using the perspective property on the parent element residing over child 
elements being transformed.

Using the perspective value within the transform property works great for transforming one 
element from a single, unique perspective. When you want to transform a group of elements 
all with the same perspective, or vanishing point, apply the perspective property to their 
parent element.

The perspective value can be set as none or a length measurement. The none value turns off 
any perspective, while the length value will set the depth of the perspective. The higher 
the value, the further away the perspective appears, thus creating a fairly low intensity 
perspective and a small three-dimensional change. The lower the value the closer the 
perspective appears, thus creating a high intensity perspective and a large three-dimensional change.

As with setting a transform-origin you can also set a perspective-origin. The same values 
used for the transform-origin property may also be used with the perspective-origin property, 
and maintain the same relationship to the element. The large difference between the two 
falls where the origin of a transform determines the coordinates used to calculate the 
change of a transform, while the origin of a perspective identifies the coordinates of 
the vanishing point of a transform.

On occasion three-dimensional transforms will be applied on an element that is nested within a 
parent element which is also being transformed. In this event, the nested, transformed elements 
will not appear in their own three-dimensional space. To allow nested elements to transform in 
their own three-dimensional plane use the transform-style property with the preserve-3d value.

The transform-style property needs to be placed on the parent element, above any nested 
transforms. The preserve-3d value allows the transformed children elements to appear in 
their own three-dimensional plane while the flat value forces the transformed children 
elements to lie flat on the two-dimensional plane.


Backface Visibility#backface-visibility
When working with three-dimensional transforms, elements will occasionally be transformed 
in a way that causes them to face away from the screen. This may be caused by setting 
the rotateY(180deg) value for example. By default these elements are shown from the back. 
So if you prefer not to see these elements at all, set the backface-visibility property to 
hidden, and you will hide the element whenever it is facing away from the screen.

The other value to backface-visibility is visible which is the default value, always 
displaying an element, no matter which direction it faces.