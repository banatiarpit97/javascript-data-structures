[ '1', '2', '3' ].map(parseInt) //[ 1, NaN, NaN ]

since map passed an extra arguemnt index and parseInt accepts another arguemnt as radix/base
to correct:
    ['1', '2', '3'].map(function (x) { return parseInt(x, 10) })

////////////////////////////////////////////////////////
function getPersonInfo(one, two, three) {
  console.log(one);
  console.log(two);
  console.log(three);
}

const person = 'Lydia';
const age = 21;

getPersonInfo`${person} is ${age} years old`;

//["", " is ", " years old"] "Lydia" 21
If you use tagged template literals, the value of the first argument is always an
array of the string values. The remaining arguments get the values of the passed expressions!

////////////////////////////////////////////////////////
eval('10*10+5');    //105

/////////////////////////////////////////////////////////
const obj = { a: 'one', b: 'two', a: 'three' };
console.log(obj);
//{ a: "three", b: "two" }
If you have two keys with the same name, the key will be replaced.
It will still be in its first position, but with the last specified value.

///////////////////////////////////////////////////////////////
String.prototype.print = function() {
    console.log(this)
}
'a'.print()
//String obj -> {0: "a"}

/////////////////////////////////////////////////////////////////
const a = {};
const b = { key: 'b' };
const c = { key: 'c' };

a[b] = 123;
a[c] = 456;

console.log(a[b]);  //456

Object keys are automatically converted into strings.
when we stringify an object, it becomes "[object Object]".
So what we are saying here, is that a["object Object"] = 123.
Then, we can try to do the same again. a["object Object"] = 456.

/////////////////////////////////////////////////////////////////
0;  //false
new Number(0);  //true
('');   //false
(' ');  //true
new Boolean(false); //true
undefined;  //false

Function constructors, like new Number and new Boolean are truthy.

///////////////////////////////////////////////////////////////////
console.log(typeof typeof 1);   //string

///////////////////////////////////////////////////////////////////

(() => {
  let x, y;
  try {
    throw new Error();
  } catch (x) {
    (x = 1), (y = 2);
    console.log(x);
  }
  console.log(x);
  console.log(y);
})();

// 1 undefined 2

///////////////////////////////////////////////////////////////
pass parameters to setTimeout callback:

In modern browsers, the "setTimeout" receives a third parameter that is sent as
parameter to the internal function at the end of the timer.
    setTimeout(alert, 1000, 'hello');

or create a function
    setTimeout(() => alert('hello'), 1000)

/////////////////////////////////////////////////////////////////
IMP
let person = { name: 'Lydia' };
const members = [person];
person = null;

console.log(members);   //[{ name: 'Lydia' }]

we are not modifying the obj, we are changing the variable itself and hence array
still have that object

////////////////////////////////////////////////////////////////
const num = parseInt('7*6', 10);
// 7

Once parseInt encounters a character that isn't a valid number in the radix,
it stops parsing and ignores the following characters.

/////////////////////////////////////////////////////////
function Car() {
  this.make = 'Lamborghini';
  return { make: 'Maserati' };
}

const myCar = new Car();
console.log(myCar.make);  //Maserati

if we explicitly return something from the xonstructor function then new obj(this) won't be
returned

/////////////////////////////////////////////////////////////
(() => {
  let x = (y = 10);
})();

console.log(typeof x);
console.log(typeof y);
//"undefined", "number"

let x = y = 10; is actually shorthand for:
y = 10;
let x = y;

/////////////////////////////////////////////////////////////
class Dog {
  constructor(name) {
    this.name = name;
  }
}

Dog.prototype.bark = function() {
  console.log(`Woof I am ${this.name}`);
};

const pet = new Dog('Mara');
pet.bark();
delete Dog.prototype.bark;
pet.bark();

//"Woof I am Mara", TypeError
We can delete properties from objects using the delete keyword, also on the prototype.
but not indirectly, we have to reference prototype directly not by js going up the chain

/////////////////////////////////////////////////////////////////
// counter.js
let counter = 10;
export default counter;

// index.js
import myCounter from './counter';
myCounter += 1;
console.log(myCounter);

//Error
An imported module is read-only: you cannot modify the imported module.
Only the module that exports them can change its value.

///////////////////////////////////////////////////////////////////
const name = 'Lydia';
age = 21;

console.log(delete name);   //false
console.log(delete age);    //true

The delete operator returns a boolean value: true on a successful deletion,
else it'll return false. However, variables declared with the var, const or let
keyword cannot be deleted using the delete operator.

var is function scope or module scope but not writing var is global scope which is deletable

/////////////////////////////////////////////////////////////////////////////////
const settings = {
  username: 'lydiahallie',
  level: 19,
  health: 90,
};

const data = JSON.stringify(settings, ['level', 'health']);
console.log(data);
//"{"level":19, "health":90}"

The second argument of JSON.stringify is the replacer. The replacer can either be a
function or an array, and lets you control what and how the values should be stringified.

If the replacer is an array, only the property names included in the array will be
added to the JSON string..

If the replacer is a function, this function gets called on every property in the
object you're stringifying. The value returned from this function will be the value
of the property when it's added to the JSON string. If the value is undefined, this
property is excluded from the JSON string.

/////////////////////////////////////////////////////////////////////////////

let num = 10;

const increaseNumber = () => num++;
const increasePassedNumber = number => number++;

const num1 = increaseNumber();
const num2 = increasePassedNumber(num1);

console.log(num1);  //10
console.log(num2);  //10

/////////////////////////////////////////////////////////////////////////////
// index.js
console.log('running index.js');
import { sum } from './sum.js';
console.log(sum(1, 2));

// sum.js
console.log('running sum.js');
export const sum = (a, b) => a + b;

//running sum.js, running index.js, 3

With the import keyword, all imported modules are pre-parsed. 
This means that the imported modules get run first, the code in the file which 
imports the module gets executed after.

This is a difference between require() in CommonJS and import! With require(),
you can load dependencies on demand while the code is being run. If we would have
used require instead of import, running index.js, running sum.js, 3 would have been
logged to the console.

////////////////////////////////////////////////////////////////////////////

console.log(Number(2) === Number(2));
console.log(Boolean(false) === Boolean(false));
console.log(Symbol('foo') === Symbol('foo'));

//true true false
called as normal function, not using new hence not an object
Symbol always returns a new value

////////////////////////////////////////////////////////////////////////////

function* startGame() {
  const answer = yield 'Do you love JavaScript?';
  if (answer !== 'Yes') {
    return "Oh wow... Guess we're gone here";
  }
  return 'JavaScript loves you back ❤️';
}

const game = startGame();
console.log(game.next().value); // Do you love JavaScript?
console.log(game.next("Yes").value); // JavaScript loves you back ❤️

/////////////////////////////////////////////////////////////////////////
console.log(String.raw`Hello\nworld`);

//Hello\nworld
String.raw returns a string where the escapes (\n, \v, \t etc.) are ignored! 

//////////////////////////////////////////////////////////////////////
const box = { x: 10, y: 20 };

Object.freeze(box);

const shape = box;
shape.x = 100;

console.log(shape);

//{ x: 10, y: 20 }
reference also frozen

/////////////////////////////////////////////////////////////////////////
const { name: myName } = { name: 'Lydia' };

console.log(name);  //ReferenceError

/////////////////////////////////////////////////////////////////////////
Memoized function
const add = () => {
  const cache = {};
  return num => {
    if (num in cache) {
      return `From cache! ${cache[num]}`;
    } else {
      const result = num + 10;
      cache[num] = result;
      return `Calculated! ${result}`;
    }
  };
};

///////////////////////////////////////////////////////////////////////////
const list = [1 + 2, 1 * 2, 1 / 2];
console.log(list);  //[3, 2, 0.5]

/////////////////////////////////////////////////////////////////////////////
function sayHi(name) {
  return `Hi there, ${name}`;
}

console.log(sayHi());

//Hi there, undefined
undefined/null gets converted to string(even if we use + instead of ``)

///////////////////////////////////////////////////////////////////////////////
console.log('I want pizza'[0]);
//I

////////////////////////////////////////////////////////////////////////////
function sum(num1, num2 = num1) {
  console.log(num1 + num2);
}

sum(10);
//20

You can set a default parameter's value equal to another parameter of the function,
as long as they've been defined before the default parameter

///////////////////////////////////////////////////////////////////////////
function getItems(fruitList, ...args, favoriteFruit) {
  return [...fruitList, ...args, favoriteFruit]
}

getItems(["banana", "apple"], "pear", "orange")

//SyntaxError
The rest parameter can only be the last parameter

/////////////////////////////////////////////////////////////////////////////
class Person {
  constructor() {
    this.name = 'Lydia';
  }
}

Person = class AnotherPerson {
  constructor() {
    this.name = 'Sarah';
  }
};

const member = new Person();
console.log(member.name);   //'Sarah'

////////////////////////////////////////////////////////////////////////
const info = {
  [Symbol('a')]: 'b',
};

console.log(info);
console.log(Object.keys(info));
//{Symbol('a'): 'b'} and []
A Symbol is not enumerable.

//////////////////////////////////////////////////////////////////////////
const getList = ([x, ...y]) => [x, y]
const getUser = user => { name: user.name, age: user.age }

const list = [1, 2, 3, 4]
const user = { name: "Lydia", age: 21 }

console.log(getList(list))  //[1, [2, 3, 4]]
console.log(getUser(user))  //undefined, because no brackets while returning object

//////////////////////////////////////////////////////////////////////////////
console.log(Promise.resolve(5))
//Promise {<fulfilled>: 5}

////////////////////////////////////////////////////////////////////////
function compareMembers(person1, person2 = person) {
  if (person1 !== person2) {
    console.log('Not the same!');
  } else {
    console.log('They are the same!');
  }
}

const person = { name: 'Lydia' };
compareMembers(person);

//They are the same!

/////////////////////////////////////////////////////////////////////////
function* generatorOne() {
  yield ['a', 'b', 'c'];
}

function* generatorTwo() {
  yield* ['a', 'b', 'c'];
}

const one = generatorOne();
const two = generatorTwo();

console.log(one.next().value);
console.log(two.next().value);

//['a', 'b', 'c'] and a

With the yield keyword, we yield values in a generator function.
With the yield* keyword, we can yield values from another generator function,
or iterable object (for example an array).

In generatorOne, we yield the entire array ['a', 'b', 'c'] using the yield keyword.
The value of value property on the object returned by the next method on one
(one.next().value) is equal to the entire array ['a', 'b', 'c'].

In generatorTwo, we use the yield* keyword. This means that the first yielded value of
two, is equal to the first yielded value in the iterator. The iterator is the array
['a', 'b', 'c']. The first yielded value is a, so the first time we call 
two.next().value, a is returned.

/////////////////////////////////////////////////////////////////////
console.log(`${(x => x)('I love')} to program`);
//I love to program

////////////////////////////////////////////////////////////////////
let config = {
  alert: setInterval(() => {
    console.log('Alert!');
  }, 1000),
};

//The setInterval callback will still be called every second

Normally when we set objects equal to null, those objects get garbage collected as
there is no reference anymore to that object. However, since the callback function
within setInterval is an arrow function (thus bound to the config object), the
callback function still holds a reference to the config object. As long as there
is a reference, the object won't get garbage collected. Since it's not garbage
collected, the setInterval callback function will still get invoked every 1000ms (1s).

////////////////////////////////////////////////////////////////////
const myMap = new Map();
const myFunc = () => 'greeting';

myMap.set(myFunc, 'Hello world!');

myMap.get('greeting');  //undefined
myMap.get(myFunc);      //Hello world
myMap.get(() => 'greeting');  //undefined since this is a new function/object so 
not strictly equal

///////////////////////////////////////////////////////////////////
let num = 1;
const list = [1, 2, 3, 4];

console.log(list[(num += 1)]);    //3

/////////////////////////////////////////////////////////////////////
const person = {
  firstName: 'Lydia',
  lastName: 'Hallie',
  pet: {
    name: 'Mara',
    breed: 'Dutch Tulip Hound',
  },
  getFullName() {
    return `${this.firstName} ${this.lastName}`;
  },
};

console.log(person.pet?.name);    //Mara
console.log(person.pet?.family?.name);  //undefined
console.log(person.getFullName?.());  //Lydia Hallie 
console.log(member.getLastName?.());  //ReferenceError

/////////////////////////////////////////////////////////////////
const config = {
  languages: [],
  set language(lang) {
    return this.languages.push(lang);
  },
};
console.log(config.language);
//undefined

The language method is a setter. Setters don't hold an actual value, their purpose
is to modify properties. When calling a setter method, undefined gets returned.

////////////////////////////////////////////////////////////////////
const name = 'Lydia Hallie';

console.log(!typeof name === 'object');
console.log(!typeof name === 'string');

//false false
Calculated as (!(typeof name)) === 'string'

////////////////////////////////////////////////////////////////
async function* range(start, end) {
  for (let i = start; i <= end; i++) {
    yield Promise.resolve(i);
  }
}

(async () => {
  const gen = range(1, 3);
  for await (const item of gen) {
    console.log(item);
  }
})();

//1 2 3

///////////////////////////////////////////////////////////////////
function getFine(speed, amount) {
  const formattedSpeed = new Intl.NumberFormat({
    'en-US',
    { style: 'unit', unit: 'mile-per-hour' }
  }).format(speed)

  const formattedAmount = new Intl.NumberFormat({
    'en-US',
    { style: 'currency', currency: 'USD' }
  }).format(amount)

  return `The driver drove ${formattedSpeed} and has to pay ${formattedAmount}`
}

console.log(getFine(130, 300))

//The driver drove 130 mph and has to pay $300.00

////////////////////////////////////////////////////////////////////
const spookyItems = [1, 2, 3];
({ item: spookyItems[3] } = { item: 4 });

console.log(spookyItems);
//[1,2,3,4]

By destructuring objects, we can unpack values from the right-hand object,
and assign the unpacked value to the value of the same property name on the
left-hand object.

/////////////////////////////////////////////////////////////////
const name = 'Lydia Hallie';
const age = 21;

console.log(Number.isNaN(name));  //false
console.log(Number.isNaN(age));   //false

console.log(isNaN(name));   //true
console.log(isNaN(age));    //false

////////////////////////////////////////////////////////////////
class Counter {
  constructor() {
    this.count = 0;
  }

  increment() {
    this.count++;
  }
}

const counterOne = new Counter();
counterOne.increment();
counterOne.increment();

const counterTwo = counterOne;
counterTwo.increment();

console.log(counterOne.count);    //3(reference)

///////////////////////////////////////////////////////////////////////////

const myPromise = Promise.resolve(Promise.resolve('Promise!'));

function funcOne() {
  myPromise.then(res => res).then(res => console.log(res));
  setTimeout(() => console.log('Timeout!', 0));
  console.log('Last line!');
}

async function funcTwo() {
  const res = await myPromise;
  console.log(await res);
  setTimeout(() => console.log('Timeout!', 0));
  console.log('Last line!');
}

funcOne();
funcTwo();

//Last line! Promise! Promise! Last line! Timeout! Timeout!

first all the sync code will execute
then all promises
then all setTimeout(setTimeout won't execute till both the functions are executed
since call stack needs to be empty for Timeout to executed)

////////////////////////////////////////////////////////////////////////
const person = {
  name: 'Lydia Hallie',
  hobbies: ['coding'],
};

function addHobby(hobby, hobbies = person.hobbies) {
  hobbies.push(hobby);
  return hobbies;
}

addHobby('running', []);
addHobby('dancing');
addHobby('baking', person.hobbies);

console.log(person.hobbies);
//["coding", "dancing", "baking"]

///////////////////////////////////////////////////////////////////
class Bird {
  constructor() {
    console.log("parent");
  }
}

class Flamingo extends Bird {
  constructor() {
    console.log("child");
    super();
  }
}

const pet = new Flamingo();
//child parent

///////////////////////////////////////////////////////////////////
const a = [1,2]
a.splice(0,1)   //NO error because of const

/////////////////////////////////////////////////////////////////////

const person = {
  name: "Lydia Hallie",
  age: 21,
  *[Symbol.iterator]() { yield* Object.values(this) }
}

[...person] 
//["Lydia Hallie", 21]

/////////////////////////////////////////////////////////////////////
const user = {
	email: "e@mail.com",
	password: "12345"
}

const updateUser = () => {
	user.name = 'arpit'
	return user
}

const updatedUser = updateUser()
console.log(updatedUser === user)   //true

/////////////////////////////////////////////////////////////////////////
const promise1 = Promise.resolve('First')
const promise2 = Promise.resolve('Second')
const promise3 = Promise.reject('Third')
const promise4 = Promise.resolve('Fourth')

const runPromises = async () => {
	const res1 = await Promise.all([promise1, promise2])
	const res2  = await Promise.all([promise3, promise4])
	return [res1, res2]
}

runPromises()
	.then(res => console.log(res))
	.catch(err => console.log(err))

//'Third'

The Promise.all method runs the passed promises in parallel. If one promise fails,
the Promise.all method _rejects) with the value of the rejected promise.

//////////////////////////////////////////////////////////////////
How do you manipulate DOM using a service worker
Service worker can't access the DOM directly. But it can communicate with the pages
it controls by responding to messages sent via the postMessage interface, and those
pages can manipulate the DOM.

/////////////////////////////////////////////////////////////////////
What is IndexedDB
IndexedDB is a low-level API for client-side storage of larger amounts of structured
data, including files/blobs. This API uses indexes to enable high-performance searches
of this data.

////////////////////////////////////////////////////////////////////
What is a post message
Post message is a method that enables cross-origin communication between Window
objects.(i.e, between a page and a pop-up that it spawned, or between a page and an
iframe embedded within it). Generally, scripts on different pages are allowed to
access each other if and only if the pages follow same-origin
policy(i.e, pages share the same protocol, port number, and host).

///////////////////////////////////////////////////////////////////
What is a storage event and its event handler
The StorageEvent is an event that fires when a storage area has been changed in the
context of another document. Whereas onstorage property is an EventHandler for
processing storage events. The syntax would be as below
  window.onstorage = function;

//////////////////////////////////////////////////////////////////
What are server-sent events
Server-sent events (SSE) is a server push technology enabling a browser to receive
automatic updates from a server via HTTP connection without resorting to polling.
  if(typeof(EventSource) !== "undefined") {
    var source = new EventSource("sse_generator.js");
    source.onmessage = function(event) {
      document.getElementById("output").innerHTML += event.data + "<br>";
    };
  }

////////////////////////////////////////////////////////////////////
How do you access history in javascript
The window.history object contains the browser's history. You can load previous and
next URLs in the history using back() and next() methods.
  function goBack() {
    window.history.back()
  }
  function goForward() {
    window.history.forward()
  }

/////////////////////////////////////////////////////////////////////
How do you find operating system details
The window.navigator object contains information about the visitor's browser OS details.
Some of the OS properties are available under platform property,
  console.log(navigator.platform);

///////////////////////////////////////////////////////////////////////////
function a() {
    console.log(b)
}
let b = a()
//ReferenceError

/////////////////////////////////////////////////////////////////////////
for(let i=0;i<5;i++){
    (i==2) ? console.log(i) : continue;
}
Uncaught SyntaxError: Unexpected token 'continue'
can not use continue in terniary operator.

/////////////////////////////////////////////////////////////////////////
function fn(){
  var a = b = 5;
}
console.log(a)  // refence error since a is local variable
console.log(b)  // 5, since b is a global variable(Defined without var keyword)

/////////////////////////////////////////////////////////////////////////
function createIncrement(){
  let count = 0;
  function increment(){
    count++;
  }
  let message = `Count is ${count`;
  function log(){
    console.log(message);
  }
  return [increment, log];
}
const [increment, log] = createIncrement();
increment();
increment();
increment();
log();  //Count is 0

/////////////////////////////////////////////////////////////////////////
a = [null, 4, 0, 16, '']
a.filter(Boolean) // [4,16]

/////////////////////////////////////////////////////////////////////////
parseInt(0.000005) //0
parseInt(0.0000005) //5

because parseInt first converts its arguemnt to string and then extracts first digit
So in first case parseInt(0.000005) -> parseInt("0.000005") -> 0
in second case parseInt(0.0000005) -> parseInt("5e-7") -> 5

/////////////////////////////////////////////////////////////////////////
const fn = () => 'Hello World';
fn.length   //0

const fn = (a) => a;
fn.length   //1 as fn accepts 1 parameter

const fn = (...args) => 'Hello World';
fn.length   //0 rest params are not counted

const fn = (a, b=1, c) => 'Hello World';
fn.length   //1 only params before the first one with a default value is counted

/////////////////////////////////////////////////////////////////////////


